@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using SoftServeProject3.UI.Pages;
@using System.Globalization
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.SignalR.Client;

<style>
/* .wrapper{
        max-width: 940px;
        margin: 0 auto;

} */
    body {
        margin: 0 0 55px 0;
    }

    .nav {
        grid-column: 1 / 4;
        grid-row: 1;
        top: 0;
        width: 100%;
        height: 55px;
/*         box-shadow: 0 0 3px rgba(0, 0, 0, 0.2); */
        background-color: #ffffff;
        display: flex;
        overflow-x: auto;

    }

    .nav__link {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        flex-grow: 1;
        overflow: hidden;
        white-space: nowrap;
        font-family: sans-serif;
        font-size: 13px;
        color: #444444;
        text-decoration: none;
        -webkit-tap-highlight-color: transparent;
        transition: background-color 0.1s ease-in-out;
        min-width: 100px;


    }

        .nav__link:hover {
/*             background-color: #eeeeee; */
        }

    .nav__link--active {
        color: #009578;
    }

    .nav__icon {
        font-size: 18px;
    }


    .profile-picture {
        background-color: pink;
        width: 20vh;
        height: 20vh;
        border-radius: 50%;
        overflow: hidden;
        margin-bottom: 20px; 
    }

        .profile-picture img {
            width: 100%;
            height: 100%;
        }

    .friend-requests-indicator {
        background-color: red;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.8em;
        margin-left: 5px; 
        position: absolute;
        transform: translate(230%, -80%);
    }


    .left-links {
        display: flex;
        align-items: center;
        margin-right: auto; /* Push the left-links to the left as much as possible */
        position: absolute;
        left: 0;
        top: 10px;
    }

    .right-links {
        display: flex;
        align-items: center;
        margin-left: auto; /* Push the left-links to the left as much as possible */
        position: absolute;
        right: 0;
        top: 10px;

    }

    .right-links button{
        border:0;
        background-color: #ffffff;
        margin-left: auto;
    }

        .right-links button:hover{
                color: #0a58ca;
        }

    .profile-dropdown {

        position: relative;
        z-index: 100; 
    }

    .profile-dropdown-content {
        display: none;
        position: absolute;
        background-color: #ffffff;

/*         box-shadow: 0px 0px 16px 0px rgba(0, 0, 0, 0.2); */
        z-index: 101;
    }

    .profile-dropdown:hover .profile-dropdown-content {
        display: block;
    }

    .profile-dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        font-size: 14px;
    }

        .profile-dropdown-content a:hover {
/*             background-color: #f1f1f1; */
        }
</style>


<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<nav class="nav">
    <div class="left-links">
    <a href="MainPage" class="nav__link">
        <i class="material-icons nav__icon">home</i>
        <span class="nav__text">Головна</span>
    </a>
        <a href="UserSearch" class="nav__link">
        <i class="material-icons nav__icon">search</i>
        <span class="nav__text">Пошук</span>
    </a>
    <a href="chat" class="nav__link">
        <i class="material-icons nav__icon">chat</i>
        <span class="nav__text">Чат</span>
    </a>
    </div>

    <div class="right-links">

        <button @onclick="ShowMessagePopup" class="nav__link">
            <i class="material-icons nav__icon">people</i>
            <span class="nav__text">Запити в друзі</span>
            @if (incomingRequests?.Any() == true)
            {
                <span class="friend-requests-indicator">@incomingRequests.Count</span>
            }
        </button>
            @if (showMessagePopup)
            {
                <MessagePopupComponent IsVisible="@showMessagePopup" OnClose="HandleClose" />
            }

        <div class="profile-dropdown">
            <a href="UserProfile" class="nav__link nav__link--active">
                <i class="material-icons nav__icon">account_circle</i>
                <span class="nav__text">@(myProfile.Username)</span>
            </a>
            <div class="profile-dropdown-content">

                <NavLink class="nav-link" href="" @onclick="Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Log Out
                </NavLink>
            </div>
        </div>

    </div>
</nav>
    
@code {
    string errorMessage;
    List<Friend> incomingRequests = new List<Friend>();
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private UserModel myProfile = new();

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetToken();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7292/chatHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();
        hubConnection.On<string>("UpdateOutgoingList", (username) =>
        {

            UpdateIndicator();
            StateHasChanged();
        });
        await hubConnection.StartAsync();
        try
        {

            
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            myProfile = await Http.GetFromJsonAsync<UserModel>($"https://localhost:7292/Users/profile/");
            incomingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/incomingRequests");
            errorMessage = "Failed to load user info";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private bool showMessagePopup = false;

    private async Task ShowMessagePopup()
    {
        // string username = "Rosik13";
        // await hubConnection.SendAsync("UpdateOutgoingList", username);
        showMessagePopup = true;

    }
    private async Task HandleClose(bool isClosed)
    {
        showMessagePopup = false;
        
    }

    private async Task UpdateIndicator()
    {
        incomingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/incomingRequests");
        StateHasChanged();
    }
    private async Task Logout()
    {
        await TokenService.RemoveToken();
        Navigation.NavigateTo("/");
    }
}
