@page "/UserProfile/{Username}"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@using SoftServeProject3.UI.Services;
@using System.Globalization

<head>
    <PageTitle>Розклад</PageTitle>
</head>


<body>
    <div class="wrapper">
        <div class="one">
            <div class="left-links">
                <a href="#">Home</a>
                <a href="fetchdata">Пошук студентів</a>
                <a href="login">Налаштування</a>
            </div>
            <div class="right-links">
                <a href="counter">Чат</a>
                <a href="checking_mail">Профіль</a>
            </div>
        </div>
        <div class="two">
            <div class="profile-picture">
                <img src="https://t4.ftcdn.net/jpg/05/89/93/27/360_F_589932782_vQAEAZhHnq1QCGu5ikwrYaQD0Mmurm0N.jpg" alt="Фото профілю">
            </div>
        </div>
        <div class="three">
            <h1>Мій розклад</h1>
            @if (errorMessage != null)
            {
                <p class="text-danger">@errorMessage</p>
            }
            <!-- Код для відображення розкладу -->
            @if (schedule == null)
            {
                <p>Loading...</p>
            }
            else if (schedule.Count == 0)
            {
                <p>Розклад пустий</p>
            }
            else
            {
                <!-- Таблиця для відображення розкладу -->
                <table class="table">
                    <thead>
                        <tr>
                            <th>День тижня</th>
                            <th>Час</th>
                            <th>Дії</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var kvp in schedule)
                        {
                            var dayOfWeek = kvp.Key;
                            var tasks = kvp.Value;
                            <tr>
                                <td>@dayOfWeek</td>
                                <td>
                                    @if (tasks != null && tasks.Count > 0)
                                    {
                                        @for (int index = 0; index < tasks.Count; index++)
                                        {
                                            var task = tasks[index];
                                            if (task != null)
                                            {
                                                <!-- Компонент для редагування часу завдання -->
                                                <div>
                                                    <input type="text" @bind="task.StartString" placeholder="Початок" />
                                                    -
                                                    <input type="text" @bind="task.EndString" placeholder="Кінець" />
                                                    <button @onclick="() => RemoveTask(tasks, index - 1)">Видалити</button>
                                                </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <!-- Повідомлення, якщо часу немає -->
                                        <div>Немає часу</div>
                                    }
                                    <!-- Кнопка для додавання нового завдання -->
                                    <button @onclick="() => AddNewTask(tasks)">Додати час</button>
                                </td>
                                <td>
                                    <!-- Кнопка для збереження змін у розкладі -->
                                    <button @onclick="() => SaveChanges(dayOfWeek, tasks)">Зберегти</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="four">
            <div class="username-container">
                <h3>@(user?.Username ?? "Завантаження...")</h3>
            </div>

        </div>
        <div class="five">опис до профілю
            <h3>@(user?.Email ?? "Завантаження...")</h3>
        </div>
        <div class="social">
            <a href="https://www.instagram.com/"><div class="circle1"> </div></a>
            <a href="https://twitter.com/"><div class="circle2"> </div></a>
            <a href="https://github.com/"><div class="circle3"> </div></a>
            <a href="https://www.facebook.com/"><div class="circle4"> </div></a>
            <a href="https://t.me/KaijiAkagii"><div class="circle5"> </div></a>
            <a href="https://www.instagram.com/"><div class="circle6"> </div></a>

        </div>
        <div class="button-content">122 інформатика</div>
        <div class="Subject">122 інформати1111ка</div>


    </div>



</body>
@* evgeniypoklov@gmail.com *@
@* Myparol2017 *@
@code {

    private Dictionary<DayOfWeek, List<TimeRange>> schedule;
    private string email;
    private string username;
    private string errorMessage;
    private DayOfWeek? selectedDay;
    public delegate Task UpdateScheduleDelegate(DayOfWeek dayOfWeek, List<string> tasks);

    

    // [Parameter]
    // public string Username { get; set; }
    // В один файл звести
    public class User
    {
        [Parameter]
        public string Username { get; set; }
        public string Email { get; set; }
        public bool IsEmailConfirmed { get; set; }
        public Dictionary<string, List<TimeRange>> Schedule { get; set; }
    }
    [Parameter]
    public string Username { get; set; }
    private User user;


    public class UserInfo
    {
        public string Email { get; set; }
        public string Username { get; set; }
    }

    /// <summary>
    /// Метод для додавання нового часу на конкретний день.
    /// </summary>
    private void AddNewTask(List<TimeRange> tasks)
    {
        if (tasks == null)
        {
            tasks = new List<TimeRange>();
        }

        tasks.Add(new TimeRange());
        StateHasChanged();
    }

    /// <summary>
    /// Метод для часу до розкладу на конкретний день.
    /// </summary>
    private void AddTask(DayOfWeek dayOfWeek)
    {
        if (!schedule.ContainsKey(dayOfWeek))
        {
            schedule[dayOfWeek] = new List<TimeRange>();
        }

        schedule[dayOfWeek].Add(new TimeRange());
    }


    /// <summary>
    /// Метод, який викликається під час ініціалізації сторінки.
    /// Відповідає за завантаження інформації про користувача з токену який зберігається в localStorage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await Http.GetFromJsonAsync<User>($"https://localhost:7292/Users/username/{Username}");
            // var token = await TokenService.GetToken();
            // var response = await Http.PostAsJsonAsync("https://localhost:7292/Users/get-user-info", token);
            email = user.Username;
            await LoadSchedule();
            // if (response.IsSuccessStatusCode)
            // {
            //     var userInfo = await response.Content.ReadFromJsonAsync<UserInfo>();
                
            //     await LoadSchedule();
            // }
            // else
            // {
            //     errorMessage = "Failed to load user info";
            // }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    /// <summary>
    /// Метод для завантаження розкладу з сервера.
    /// </summary>
    private async Task LoadSchedule()
    {
        try
        {
            var rawSchedule = user.Schedule;
            schedule = rawSchedule.ToDictionary(
                kvp => (DayOfWeek)Enum.Parse(typeof(DayOfWeek), kvp.Key),
                kvp =>
                {
                    var timeRanges = kvp.Value;
                    foreach (var range in timeRanges)
                    {
                        range.StartString = range.Start.ToString("HH:mm");
                        range.EndString = range.End.ToString("HH:mm");
                    }
                    return timeRanges;
                }
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading schedule: {ex.Message}");
            errorMessage = "Failed to load schedule";
        }
    }

    /// <summary>
    /// Метод для оновлення розкладу на сервері.
    /// </summary>
    private async Task UpdateSchedule(DayOfWeek dayOfWeek, List<TimeRange> tasks)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7292/Users/{email}/{dayOfWeek}", tasks);
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Failed to update schedule";
            }
            else
            {
                await LoadSchedule();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
    }

    /// <summary>
    /// Метод для збереження змін у розкладі.
    /// </summary>
    private async Task SaveChanges(DayOfWeek dayOfWeek, List<TimeRange> tasks)
    {
        try
        {
            var timeRanges = new List<TimeRange>();
            foreach (var tr in tasks)
            {
                if (tr != null)
                {
                    if (DateTime.TryParseExact(tr.StartString, "HH:mm", null, DateTimeStyles.None, out var start) &&
                        DateTime.TryParseExact(tr.EndString, "HH:mm", null, DateTimeStyles.None, out var end))
                    {
                        if (end <= start)
                        {
                            errorMessage = "Час завершення повинен бути пізніше часу початку.";
                            return;
                        }
                        timeRanges.Add(new TimeRange { Start = start, End = end });
                    }
                    else
                    {

                        errorMessage = "Неправильний формат часу. Будь ласка, введіть час у форматі HH:mm.";
                        return;
                    }
                }
            }

            await UpdateSchedule(dayOfWeek, timeRanges);
            Console.WriteLine("Розклад успішно оновлено");
        }
        catch (Exception ex)
        {
            errorMessage = $"Виникла помилка: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
    }

    /// <summary>
    /// Метод для видалення проміжку часу.
    /// </summary>
    private void RemoveTask(List<TimeRange> tasks, int index)
    {
        Console.WriteLine($"Removing {index}");

        if (tasks == null)
        {
            return;
        }

        if (index < 0 || index >= tasks.Count)
        {
            return;
        }

        tasks.RemoveAt(index);
        StateHasChanged();
    }
    public class TimeRange
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }

        public string StartString { get; set; } = "";
        public string EndString { get; set; } = "";
    }
}