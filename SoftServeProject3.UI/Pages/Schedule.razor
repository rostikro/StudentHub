@page "/UserProfile"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;



<head>
    <PageTitle>Профіль</PageTitle>
</head>
@* R Від Романа, постараюсь розписати код так як я його розумію.
HTML-розмітка сторінки розташована всередині if-блоку.
Цей блок перевіряє, чи користувач аутентифікований (isUserAuthenticated).
Якщо так, то відображається розмітка профілю користувача.
Інакше воно виводить: Будь ласка, ввійдіть для доступу до цієї сторінки. *@
@if (isUserAuthenticated)
{
    @* R даному випадку, код використовує @if (userProfile != null) для перевірки,
    чи існує об'єкт userProfile. Якщо він існує (тобто не є null), то відображається відповідна частина HTML розмітки.
    Це допомагає уникнути помилок, які можуть виникнути при спробі отримати доступ до властивостей чи методів об'єкта,
    який не існує (має значення null). При null воно виводить: Завантаження...*@
    @if (userProfile != null)
    {
        @* R верхній навбар з посиланнями на інші сторінки *@
        <body>
            <div class="wrapper">
                <div class="one">
                    <div class="left-links">
                        <a href="#">Home</a>
                        <a href="UserSearch">Пошук студентів</a>
                    </div>
                    <div class="right-links">
                        <a href="UserProfile">Профіль</a>
                    </div>
                </div>
                @* R область з фотографією *@
                <div class="two">
                    @if (isEditMode)
                    {
                        if (!isUsernameEdit)
                        {
                            <div style="display: flex;">
                                <h2 style="margin-right: 0;">@userProfile.username</h2>
                                <button @onclick="ToggleUsernameEdit">&#x270E</button>
                            </div>
                        }
                        else
                        {
                            <div style="display: flex;">
                                <input type="text" @bind="userProfile.username" />
                                <button @onclick="CheckUsername">&#x2713</button>
                            </div>
                        }

                    }
                    else
                    {
                        <h2 style="color:black">@userProfile.username</h2>

                    }

                    @* R Якщо isEditMode має значення true,
            тобто користувач перебуває у режимі редагування,
            то відображається блок редагування фото профілю: де input type="text" створює текстове поле вводу + type="text" дозволяє  вводити будь-який текст у відповідне поле (не тільки цифри).
            @bind робить так, що значення властивості photoUrl об'єкта userProfile буде автоматично оновлено на сервері, якщо користувач введе текст у текстове поле.
            На додаток, якщо значення photoUrl буде змінено в коді на сервері, зміни також автоматично відобразяться в текстовому полі на веб-сторінці.*@
                    @if (isEditMode)
                    {
                        <div class="profile-picture-edit">
                            <input type="text" @bind="userProfile.photoUrl" class="form-control" />
                        </div>
                    }
                    @* Якщо isEditMode має значення false, тобто користувач не перебуває у режимі редагування, то відображається блок зображення фото профілю:
            де <img> відображає фотографію профілю з URL, збереженого в userProfile.photoUrl.
            Якщо userProfile.photoUrl не містить URL фотографії, то відображається текстовий атрибут alt (в даному випадку "Немає Фото профілю").
            *@
                    else
                    {
                        <div class="profile-picture">
                            <img src="@userProfile.photoUrl" alt="Немає фото профілю">
                        </div>
                    }
                </div>
                <div class="three">
                    <h1>Мій розклад</h1>
                    @* R Якщо змінна errorMessage не є null, то відображається текст помилки червоним кольором.*@
                    @if (errorMessage != null)
                    {
                        <p class="text-danger">@errorMessage</p>
                    }
                    @* R Якщо розклад (schedule) є null, то відображається текст "Loading...", який вказує на те, що дані розкладу завантажуються.*@
                    @if (schedule == null)
                    {
                        <p>Loading...</p>
                    }
                    @* R Якщо розклад існує, але не має жодних записів (його розмір рівний нулю), відображається повідомлення "Розклад пустий".*@
                    else if (schedule.Count == 0)
                    {
                        <p>Розклад пустий</p>
                    }
                    @* R Якщо розклад не є null і має записи, то відображається таблиця розкладу з вказаною структурою.*@
                    else
                    {

                        <table class="table">
                            @* <thead> вказує на заголовок таблиці з назвами стовпців ("День тижня" та "Час"). *@
                            <thead>
                                <tr>
                                    <th>День тижня</th>
                                    <th>Час</th>
                                </tr>
                            </thead>
                            <tbody>



                                @if (isEditMode)
                                {
                                    @* R Якщо isEditMode має значення true, то використовується цикл foreach для перебору записів у словнику schedule.
                    У словнику schedule ключами є дні тижня (наприклад, понеділок, вівторок тощо), а значеннями є списки завдань (tasks), які пов'язані з кожним конкретним днем тижня. *@
                                    @foreach (var kvp in schedule)
                                    {
                                        var dayOfWeek = DayOfWeekLocal[(int)kvp.Key]; @* Отримує день тижня, який є ключем у словнику schedule. *@
                                        var tasks = kvp.Value; @* Отримує список завдань, пов'язаних із поточним днем тижня. *@
                                        <tr>
                                            @* R html штучка яка створює рядок у таблиці*@
                                            <td>@dayOfWeek</td> @* R html штучка яка створює стандартну-комірку у таблиці і у неї записується день тижня *@
                                            <td>
                                                @* друга стандартна-комірка у таблиці і у неї записується день тижня *@
                                                @for (int index = 0; index < tasks.Count; index++)
                                                {
                                                    var task = tasks[index];
                                                    <div>
                                                        <input type="text" @bind="task.StartString" placeholder="Початок" />
                                                        -
                                                        <input type="text" @bind="task.EndString" placeholder="Кінець" />
                                                        <button @onclick="() => RemoveTask(tasks, index -1 )">Видалити</button>
                                                    </div>
                                                }
                                                <button @onclick="() => AddNewTask(tasks)">Додати час</button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                @* Якщо isEditMode false, цикл foreach у else рендерить кожний день тижня у текстовому форматі, де часові проміжки відображаються як звичайний текст без можливості редагування.
                    Це відбувається тому, що у режимі перегляду не потрібно надавати можливість редагування розкладу, отже, вводити текстові поля і кнопки не потрібно. Вміст часових проміжків виводиться як текстова рядок без зміни. *@
                                {
                                    <!-- Render as plain text for viewing -->
                                    @foreach (var kvp in schedule)
                                    {
                                        var dayOfWeek = DayOfWeekLocal[(int)kvp.Key];
                                        var tasks = kvp.Value;
                                        <tr>
                                            <td>@dayOfWeek</td>
                                            <td>
                                                @foreach (var task in tasks)
                                                {
                                                    <div>
                                                        @task.StartString - @task.EndString
                                                    </div>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    }
                </div>
                @* <div class="four">
        <div class="username-container">
        <h3>Нікнейм користувача</h3>
        </div>

        </div> *@

                @* R частина коду з юзернеймом(можна лише читати)*@
                @* <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="name" class="form-control" value="@userProfile.username" readonly />
        </div> *@
                @* R частина коду у якій юзер може редагувати ім'я' *@
                @if (isEditMode)
                {

                    <div class="form-group">
                        <label for="name">Ініціали:</label>
                        <input type="text" id="name" class="form-control" @bind="@userProfile.name" />
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label for="name">@(@userProfile.name != string.Empty ? "Ініціали:" : "")</label>
                        <p id="name" class="form-control-plaintext">@userProfile.name</p>
                    </div>
                }


                @* <div class="five">опис до профілю</div> *@
                @* R факультет*@
                @if (isEditMode)
                {

                    <div class="five">
                        <div class="form-group">
                            <label for="faculty">Факультет:</label>
                            <input type="text" id="faculty" class="form-control" @bind="userProfile.faculty" />
                        </div>
                        <label for="description">Опис:</label>
                        <textarea id="description" class="form-control" @bind="@userProfile.description"></textarea>
                    </div>
                }
                else
                {

                    <div class="five">
                        <div class="button-content">
                            <label for="faculty">Факультет:</label>
                            <span>@userProfile.faculty</span>
                        </div>
                        <label for="description">Опис:</label>
                        <p id="description" class="form-control-plaintext">@userProfile.description</p>
                    </div>
                }

                <div class="soc">
                    @foreach (var socialLink in userProfile.social)
                    {
                        @if (isEditMode)
                        {
                            <div class="form-group">
                                <label for="@socialLink.Key">@socialLink.Key:</label>
                                <input type="text" id="@socialLink.Key" class="form-control" @bind="userProfile.social[socialLink.Key]" />
                            </div>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(socialLink.Value))
                            {
                                <div class="social">
                                    <a href="@socialLink.Value"><div class="@GetSocialClass(socialLink.Key)"></div></a>
                                </div>
                            }
                            
                        }
                    }


                </div>

                @* <div class="button-content">122 інформатика</div> *@

                @* <div class="Subject">122 інформати1111ка</div> *@

                @if (isEditMode)
                {
                    <div class="subjectSearch">
                        <label for="subjectSearch">Пошук предмету:</label>
                        <input type="text" id="subjectSearch" @bind="subjectSearch" @bind:event="oninput" />

                        <label>Обрані предмети:</label>
                        @if (selectedSubjects.Any())
                        {
                            <ul>
                                @foreach (var subject in selectedSubjects)
                                {
                                    <li>@subject <button @onclick="@(() => RemoveSubject(subject))">Видалити</button></li>
                                }
                            </ul>
                        }
                    </div>
                }
                else
                {

                }

                @if (isEditMode)
                {

                    <!-- Editable multiple select for subjects -->
                    <div class="searchSubject">

                        <label>Оберіть предмет(и):</label>
                        <select @onchange="OnSubjectsSelected" multiple>
                            @if (filteredSubjects != null)
                            {
                                @foreach (var subject in filteredSubjects)
                                {
                                    <option selected=@selectedSubjects.Contains(subject)>@subject</option>
                                }
                            }
                        </select>
                    </div>
                }
                else
                {
                    <div class="subject-group">
                        <label for="subject">Предмети:</label>
                        @if (userProfile.subjects != null && userProfile.subjects.Any())
                        {
                            foreach (var subject in userProfile.subjects)
                            {
                                if (subject != userProfile.subjects[^1])
                                {
                                    <span>@subject - </span>
                                }
                                else
                                {
                                    <span>@subject</span>
                                }
                            }
                        }
                        else
                        {
                            <span>Немає предметів.</span>
                        }
                    </div>
                }

                <div class="edit">
                    @if (isEditMode)
                    {
                        <div class="editButtons">
                        <button type="button" class="btn btn-success" @onclick="SaveAllChanges">Save All Changes</button>
                        <button type="button" class="btn btn-dark" @onclick="CancelEdit">Cancel</button>
                        </div>

                    }
                    else
                    {

                        <div class="blueButton">
                            <button class="btn btn-primary" type="button" @onclick="ToggleEditMode">Edit</button>
                        </div>
                    }
                </div>
            </div>
        </body>
    }
    else
    {
        <p><em>Завантаження...</em></p>
    }
}
else
{
    <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
}

@* evgeniypoklov@gmail.com *@
@* Myparol2017 *@
@* evgeniypoklov@gmail.com *@
@* 33 *@
@code {
    private string errorMessage;

    private bool isUserAuthenticated;

    private UpdateProfile originalProfile;
    private UpdateProfile userProfile;
    private string originalUsername;

    private DayOfWeek? selectedDay;
    public delegate Task UpdateScheduleDelegate(DayOfWeek dayOfWeek, List<string> tasks);
    private Dictionary<DayOfWeek, List<TimeRange>> schedule;
    private List<string> DayOfWeekLocal = new List<string> {
        "Неділя",
        "Понеділок",
        "Вівторок",
        "Середа",
        "Четвер",
        "П'ятниця",
        "Субота"
    };

    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();

    private bool isEditMode = false;
    private bool isUsernameEdit = false;
    private string ButtonText => isEditMode ? "Cancel Edit" : "Edit";

    private void ToggleUsernameEdit()
    {
        isUsernameEdit = !isUsernameEdit;
    }

    private async Task CheckUsername()
    {
        if (userProfile.username == originalUsername)
            ToggleUsernameEdit();
        else
        {
            await SaveAllChanges();
            ToggleUsernameEdit();
        }
    }
    private async void CancelEdit()
    {
        if (originalProfile != null)
        {
            userProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(originalProfile));
            isEditMode = false;
            await LoadSchedule();
            StateHasChanged();
            Console.WriteLine("Edits canceled, changes reverted.");
        }
    }
    private void EnterEditMode()
    {
        originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
        isEditMode = true;
        StateHasChanged();
        Console.WriteLine("Entered edit mode, original profile saved.");
    }
    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
    }
    private string GetSocialClass(string key)
    {
        return key switch
        {
            "instagram" => "circle1",
            "twitter" => "circle2",
            "github" => "circle3",
            "facebook" => "circle4",
            "telegram" => "circle5",
            _ => string.Empty,
        };
    }

    /// <summary>
    /// Метод для додавання нового часу на конкретний день.
    /// </summary>
    private void AddNewTask(List<TimeRange> tasks)
    {
        if (tasks == null)
        {
            tasks = new List<TimeRange>();
        }

        tasks.Add(new TimeRange());
        StateHasChanged();
    }

    /// <summary>
    /// Метод для часу до розкладу на конкретний день.
    /// </summary>
    private void AddTask(DayOfWeek dayOfWeek)
    {
        if (!schedule.ContainsKey(dayOfWeek))
        {
            schedule[dayOfWeek] = new List<TimeRange>();
        }

        schedule[dayOfWeek].Add(new TimeRange());
    }

    /// <summary>
    /// Метод, який викликається під час ініціалізації сторінки.
    /// Відповідає за завантаження інформації про користувача з токену який зберігається в localStorage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {

            isUserAuthenticated = await IsUserAuthenticatedAsync();
            if (isUserAuthenticated)
            {
                allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
                filteredSubjects = allSubjects;
                await LoadUserProfile();
                originalUsername = userProfile.username;
                await LoadSchedule();

            }
            else
            {
                errorMessage = "Failed to load user info";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    /// <summary>
    /// Метод для завантаження розкладу з сервера.
    /// </summary>
    private async Task LoadSchedule()
    {
        try
        {
            if (userProfile != null && userProfile.schedule != null)
            {

                schedule = userProfile.schedule.ToDictionary(
                    kvp => (DayOfWeek)Enum.Parse(typeof(DayOfWeek), kvp.Key),
                    kvp =>
                    {
                        var timeRanges = kvp.Value;
                        foreach (var range in timeRanges)
                        {

                            range.StartString = range.Start.ToString("HH:mm");
                            range.EndString = range.End.ToString("HH:mm");
                        }
                        return timeRanges;
                    }
                );
            }
            else
            {
                errorMessage = "User profile schedule is not available";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing schedule: {ex.Message}");
            errorMessage = "Failed to process schedule";
        }
    }

    private void OnSubjectsSelected(ChangeEventArgs e)
    {
        var options = e.Value as IEnumerable<string>;
        if (options is not null)
        {
            selectedSubjects.AddRange(options.Except(selectedSubjects));
        }
    }

    private void UpdateSocialLink(string network, string url)
    {
        if (userProfile.social == null)
            userProfile.social = new Dictionary<string, string>();

        userProfile.social[network] = url;
    }

    /// <summary>
    /// Видаляє вибраний предмет зі списку обраних предметів.
    /// </summary>
    /// <param name="subject">Предмет, який потрібно видалити.</param>
    private void RemoveSubject(string subject)
    {
        selectedSubjects.Remove(subject);
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return !string.IsNullOrEmpty(token);
    }


    private string subjectSearch
    {
        get => _subjectSearch;
        set
        {
            if (_subjectSearch != value)
            {
                _subjectSearch = value;
                FilterSubjects();
            }
        }
    }

    /// <summary>
    /// Обробляє вибір користувача зі списку предметів.
    /// </summary>
    /// <param name="subject">Предмет, який вибрано зі списку.</param>
    private void SelectSubject(string subject)
    {
        if (!selectedSubjects.Contains(subject))
        {
            selectedSubjects.Add(subject);
        }
    }

    /// <summary>
    /// Фільтрує список предметів в залежності від того що ввів користувач у пошуку.
    /// </summary>
    private void FilterSubjects()
    {
        if (string.IsNullOrWhiteSpace(subjectSearch))
        {
            filteredSubjects = allSubjects;
        }
        else
        {
            filteredSubjects = allSubjects.Where(subject =>
                subject.Contains(subjectSearch, StringComparison.OrdinalIgnoreCase));
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            userProfile = await UserProfileService.GetProfileAsync();
            originalProfile = userProfile;
            selectedSubjects = userProfile.subjects;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing user information: {ex.Message}");
            errorMessage = "Failed to process user information";
        }
    }

    private async Task SaveAllChanges()
    {
        try
        {
            // Update the schedule in the userProfile with the new times for each day
            foreach (var daySchedule in schedule)
            {
                var dayOfWeek = daySchedule.Key.ToString();
                var tasks = daySchedule.Value;
                var dtoTimeRanges = tasks.Select(tr => new SoftServeProject3.Core.DTOs.TimeRange
                    {
                        Start = DateTime.Parse(tr.StartString),
                        End = DateTime.Parse(tr.EndString)
                    }).ToList();

                userProfile.schedule[dayOfWeek] = dtoTimeRanges;
            }
            userProfile.social = userProfile.social ?? new Dictionary<string, string>();
            userProfile.subjects = selectedSubjects;
            // Now save the userProfile
            var success = await UserProfileService.UpdateProfileAsync(userProfile);
            if (success)
            {

                await LoadSchedule();
                StateHasChanged();

            }
            else
            {
                errorMessage = $"Користувач з нікнеймом {userProfile.username} вже існує. Спробуйте інший.";
                userProfile.username = originalUsername;
                StateHasChanged();
            }
            originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
            isEditMode = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while saving the schedule: {ex.Message}";
        }
    }

    /// <summary>
    /// Метод для видалення проміжку часу.
    /// </summary>
    private void RemoveTask(List<TimeRange> tasks, int index)
    {
        Console.WriteLine($"Removing {index}");

        if (tasks == null)
        {
            return;
        }

        if (index < 0 || index >= tasks.Count)
        {
            return;
        }


        tasks.RemoveAt(index);
        StateHasChanged();
    }

}



