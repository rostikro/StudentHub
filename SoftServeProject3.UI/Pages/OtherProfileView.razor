@page "/UserProfile/{Username}"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using System.Net
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;
@using System.Net.Http.Json;
@using Microsoft.AspNetCore.SignalR.Client;

<head>
    <PageTitle>Перегляд профілю</PageTitle>
</head>
@if (isLoaded)
{
    @if (isUserAuthenticated)
    {
        @if (userProfile != null)
        {

        <body>
            <div class="wrapper">
            <SoftServeProject3.UI.wwwroot.navbar.Navbar/>

                    <div class="two">


                        <div class="verified-account">
                            <h2 style="color:black">@userProfile.username</h2>
                            @if (@isProfileVerified)
                            {
                                <img class="verified-icon"
                                     src="https://cdn2.iconfinder.com/data/icons/business-finance-170/48/identity-badge-verified-approved-man-minority-256.png"
                                     alt="Verified Icon"
                                     title="Підтверджений користувач.">

                            }
                        </div>
                        <div class="profile-picture">
                            <img src="@userProfile.photoUrl" alt="Немає фото профілю">
                        </div>

                    </div>
                    <div class="three">
                        <h1>Розклад @userProfile.username</h1>

                        @if (errorMessage != null)
                        {
                            <p class="text-danger">@errorMessage</p>
                        }

                        @if (schedule == null)
                        {
                            <p>Loading...</p>
                        }

                        else if (schedule.Count == 0)
                        {
                            <p>Розклад пустий</p>
                        }

                        else
                        {

                            <table class="table">

                                <thead>
                                    <tr>
                                        <th>День тижня</th>
                                        <th>Час</th>
                                    </tr>
                                </thead>
                                <tbody>





                                    @foreach (var kvp in schedule)
                                    {
                                        var dayOfWeek = DayOfWeekLocal[(int)kvp.Key];
                                        var tasks = kvp.Value;
                                        <tr>
                                            <td>@dayOfWeek</td>
                                            <td>
                                                @foreach (var task in tasks)
                                                {
                                                    <div>
                                                        @task.StartString - @task.EndString
                                                    </div>
                                                }
                                            </td>
                                        </tr>
                                    }


                                </tbody>
                            </table>
                        }
                    </div>

                    <div class="friend-interaction">
                        <label><b>@FriendStatusStr</b></label>
                        <hr>
                        <button class="btn" style="color:limegreen" @onclick="FriendInteractionAsync">
                            @{
                                switch (friendStatus)
                                {
                                    case FriendStatus.NOT_FRIEND:
                                        <text>
                                            Додати в друзі
                                        </text>
                                        break;
                                    case FriendStatus.FRIEND:
                                        <text>
                                            Видалити з друзів
                                        </text>
                                        break;
                                    case FriendStatus.INCOMING_REQUEST:
                                        <text>
                                            Прийняти
                                        </text>
                                        break;
                                    case FriendStatus.OUTGOING_REQUEST:
                                        <text>
                                            Відхилити
                                        </text>
                                        break;
                                }
                            }
                        </button>
                        @if (friendStatus == FriendStatus.INCOMING_REQUEST)
                        {
                            <button class="btn" style="color:darkred" @onclick="IgnoreFriendRequestAsync">Відхилити</button>
                        }

                    </div>


                    <div class="form-group">
                        <label for="name">Призвіще Ім'я:</label>
                        <p id="name" class="form-control-plaintext">@userProfile.name</p>
                    </div>
                    
                    @if (friendStatus == FriendStatus.FRIEND && userProfile.isfriendsprivate || !userProfile.isfriendsprivate)
                    {
                        <button class="btn btn-primary" @onclick="NavigateToChat">Чат</button>
                    }
                    
                    
                    <div class="five">
                        <div class="button-content">
                            <label for="faculty">Факультет:</label>
                            <span>@userProfile.faculty</span>
                        </div>
                        <label for="description">Опис:</label>
                        <p id="description" class="form-control-plaintext">@userProfile.description</p>
                    </div>

                    @if (friendStatus == FriendStatus.FRIEND && userProfile.isfriendsprivate || !userProfile.isfriendsprivate)
                    {
                        <div class="soc">
                            @foreach (var socialLink in userProfile.social)
                            {

                                @if (!string.IsNullOrEmpty(socialLink.Value))
                                {
                                    <div class="social">
                                        <a href="@socialLink.Value"><div class="@GetSocialClass(socialLink.Key)"></div></a>
                                    </div>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <div class="soc">
                        </div>
                    }






                    <div class="subject-group">
                        <label for="subject">Предмети:</label>
                        @if (userProfile.subjects != null && userProfile.subjects.Any())
                        {
                            foreach (var subject in userProfile.subjects)
                            {
                                if (subject != userProfile.subjects[^1])
                                {
                                    <span>@subject - </span>
                                }
                                else
                                {
                                    <span>@subject</span>
                                }
                            }
                        }
                        else
                        {
                            <span>Немає предметів.</span>
                        }
                    </div>



                </div>
            </body>
        }
        else
        {
            <p><em>Завантаження...</em></p>
        }
    }
    else
    {

        <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
    }
}

@* evgeniypoklov@gmail.com *@
@* Myparol2017 *@
@* evgeniypoklov@gmail.com *@
@* 33 *@
@code {
    private string errorMessage;

    private bool isUserAuthenticated;
    private bool isProfileVerified;
    bool isLoaded;
    private UpdateProfile originalProfile;
    private UpdateProfile userProfile;
    private UserModel myProfile;
    private DayOfWeek? selectedDay;
    public delegate Task UpdateScheduleDelegate(DayOfWeek dayOfWeek, List<string> tasks);
    private Dictionary<DayOfWeek, List<TimeRange>> schedule;
    private List<string> DayOfWeekLocal = new List<string> {
        "Неділя",
        "Понеділок",
        "Вівторок",
        "Середа",
        "Четвер",
        "П'ятниця",
        "Субота"
    };

    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();

    enum FriendStatus
    {
        NOT_FRIEND = 0,
        FRIEND = 1,
        OUTGOING_REQUEST = 2,
        INCOMING_REQUEST = 3
    }

    FriendStatus friendStatus = FriendStatus.NOT_FRIEND;
    private string FriendStatusStr = string.Empty;

    [Parameter]
    public string? Username { get; set; }
    private UpdateProfile? user;



    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }


    private string GetSocialClass(string key)
    {
        return key switch
        {
            "instagram" => "circle1",
            "twitter" => "circle2",
            "github" => "circle3",
            "facebook" => "circle4",
            "telegram" => "circle5",
            _ => string.Empty,
        };
    }
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    /// <summary>
    /// Метод для часу до розкладу на конкретний день.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var token = await TokenService.GetToken();
            hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7292/chatHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();
            hubConnection.On<string>("UpdateOutgoingList", (username) =>
            {
                LoadUserProfile();
                StateHasChanged();
            });
            await hubConnection.StartAsync();
            isLoaded = false;
            isUserAuthenticated = await IsUserAuthenticatedAsync();
            if (isUserAuthenticated)
            {
                allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
                filteredSubjects = allSubjects;
                await LoadUserProfile();
                LoadSchedule();
            }
            else
            {
                errorMessage = "Failed to load user info";
            }
            isLoaded = true;


        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }


    /// <summary>
    /// Метод для завантаження розкладу з сервера.
    /// </summary>
    private void LoadSchedule()
    {
        try
        {
            if (userProfile != null && userProfile.schedule != null)
            {

                schedule = userProfile.schedule.ToDictionary(
                    kvp => (DayOfWeek)Enum.Parse(typeof(DayOfWeek), kvp.Key),
                    kvp =>
                    {
                        var timeRanges = kvp.Value;
                        foreach (var range in timeRanges)
                        {

                            range.StartString = range.Start.ToString("HH:mm");
                            range.EndString = range.End.ToString("HH:mm");
                        }
                        return timeRanges;
                    }
                );
            }
            else
            {
                errorMessage = "User profile schedule is not available";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing schedule: {ex.Message}");
            errorMessage = "Failed to process schedule";
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            var token = await TokenService.GetToken();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            userProfile = await Http.GetFromJsonAsync<UpdateProfile>($"https://localhost:7292/Users/profile/{Username}");
            myProfile = await Http.GetFromJsonAsync<UserModel>($"https://localhost:7292/Users/profile/");
            var myFriends = await Http.GetFromJsonAsync<List<Friend>>($"https://localhost:7292/Users/friends");
            var myOutgoingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/outgoingRequests");
            var myIncomingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/incomingRequests");

            if (myFriends.Any(friend => friend.username.Equals(userProfile.username)))
            {
                friendStatus = FriendStatus.FRIEND;
            }
            else if (myOutgoingRequests.Any(friend => friend.username.Equals(userProfile.username)))
            {
                friendStatus = FriendStatus.OUTGOING_REQUEST;
            }
            else if (myIncomingRequests.Any(friend => friend.username.Equals(userProfile.username)))
            {
                friendStatus = FriendStatus.INCOMING_REQUEST;
            }
            else
            {
                friendStatus = FriendStatus.NOT_FRIEND;
            }

            originalProfile = userProfile;
            selectedSubjects = userProfile.subjects;
            isProfileVerified = userProfile.isProfileVerified;
            StateHasChanged();
            await FriendStatusString();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing user information: {ex.Message}");
            errorMessage = "Failed to process user information";
        }
    }

    private async Task FriendStatusString()
    {
        
        switch (friendStatus)
        {
            case FriendStatus.NOT_FRIEND:
                FriendStatusStr = "Ви поки не знайомі з цим користувачем.";
                break;
            case FriendStatus.FRIEND:
                FriendStatusStr = "Ви співпрацюєте з цим користувачем.";
                break;
            case FriendStatus.INCOMING_REQUEST:
                FriendStatusStr = "Користувач запитує дозвіл на дружбу з вами.";
                break;
            case FriendStatus.OUTGOING_REQUEST:
                FriendStatusStr = "Запит на дружбу надіслано.";
                break;
        }

        StateHasChanged();
    }

    private async Task FriendInteractionAsync()
    {
        try
        {
            var token = await TokenService.GetToken();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            string username = userProfile.username;
            
            switch (friendStatus)
            {
                case FriendStatus.NOT_FRIEND:
                    var response = await Http.PostAsync($"https://localhost:7292/Users/addFriend?target={userProfile.username}", null);
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        friendStatus = FriendStatus.OUTGOING_REQUEST;
                        
                    }
                    break;

                case FriendStatus.FRIEND:
                    response = await Http.PostAsync($"https://localhost:7292/Users/removeFriend?target={userProfile.username}", null);
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        friendStatus = FriendStatus.NOT_FRIEND;
                       
                    }
                    break;

                case FriendStatus.OUTGOING_REQUEST:
                    response = await Http.PostAsync($"https://localhost:7292/Users/cancelFriendRequest?target={userProfile.username}", null);
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        friendStatus = FriendStatus.NOT_FRIEND;
                        
                    }
                    break;

                case FriendStatus.INCOMING_REQUEST:
                    response = await Http.PostAsync($"https://localhost:7292/Users/acceptFriendRequest?target={userProfile.username}", null);
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        friendStatus = FriendStatus.FRIEND;
                        
                    }
                    break;
            }
            await hubConnection.SendAsync("UpdateOutgoingList", username);
            await hubConnection.SendAsync("UpdateOutgoingList", myProfile.Username);
            await FriendStatusString();

        }
        catch (Exception e)
        {
            Console.WriteLine("Error occured in FriendInteractionAsync(): " + e.Message);
            errorMessage = "Error occured while interacting with friend";
        }
    }

    private async Task IgnoreFriendRequestAsync()
    {
        try
        {
            string username = userProfile.username;
            var token = await TokenService.GetToken();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsync($"https://localhost:7292/Users/ignoreFriendRequest?target={userProfile.username}", null);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                friendStatus = FriendStatus.NOT_FRIEND;
                
            }
            await hubConnection.SendAsync("UpdateOutgoingList", username);
            await hubConnection.SendAsync("UpdateOutgoingList", myProfile.Username);
            await FriendStatusString();

        }
        catch (Exception e)
        {
            Console.WriteLine("Error occured in IgnoreFriendRequestAsync(): " + e.Message);
            errorMessage = "Error occured while interacting with friend";
        }
    }
    private void NavigateToChat()
    {
        Navigation.NavigateTo($"/chat/{userProfile.username}");
    }
}



