@page "/UserProfile"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;


<head>
    <PageTitle>Профіль</PageTitle>
</head>
@if (isLoaded)
{

    @if (isUserAuthenticated)
    {

        @if (userProfile != null)
        {

            <body>
                <div class="wrapper">
                    <div class="one">
                        <div class="left-links">
                            <a href="#">Home</a>
                            <a href="UserSearch">Пошук студентів</a>
                        </div>
                        <div class="right-links">
                            <button @onclick="ShowMessagePopup">Повідомлення @if(incomingRequests.Any()) {<span class="friend-requests-indicator">@incomingRequests.Count</span>}</button>
                            @if (showMessagePopup)
                            {
                                <MessagePopupComponent IsVisible="@showMessagePopup" OnClose="HandleClose" />
                            }
                            <a href="UserProfile">Профіль</a>
                        </div>
                    </div>

                    <div class="two">
                        @if (isEditMode)
                        {
                            if (!isUsernameEdit)
                            {
                                <div style="display: flex;">
                                    <h2 style="margin-right: 0;">@userProfile.username</h2>
                                    <button @onclick="ToggleUsernameEdit">&#x270E</button>
                                </div>
                            }
                            else
                            {
                                <div style="display: flex;">
                                    <input type="text" @bind="userProfile.username" />
                                    <button @onclick="CheckUsername">&#x2713</button>
                                </div>
                            }

                        }
                        else
                        {
                            <div class="verified-account">
                                <h2 style="color:black">@userProfile.username</h2>
                                @if (@isProfileVerified)
                                {
                                    <img class="verified-icon"
                                         src="https://cdn2.iconfinder.com/data/icons/business-finance-170/48/identity-badge-verified-approved-man-minority-256.png"
                                         alt="Verified Icon"
                                         title="Ви підтверджений користувач.">
                                }
                            </div>

                        }


                        @if (isEditMode)
                        {
                            <div class="form-group">
                                <input type="checkbox" id="profilePrivacy" @bind="@userProfile.isprofileprivate" />
                                <label for="profilePrivacy">Зробити профіль приватним</label>
                            </div>
                            <div class="profile-picture-edit">
                                <input type="text" @bind="userProfile.photoUrl" class="form-control" />
                            </div>
                        }

                        else
                        {
                            <div class="profile-picture">
                                <img src="@userProfile.photoUrl" alt="Немає фото профілю">
                            </div>
                        }
                    </div>
                    <div class="three">
                        <h1>Мій розклад</h1>

                        @if (errorMessage != null)
                        {
                            <p class="text-danger">@errorMessage</p>
                        }

                        @if (schedule == null)
                        {
                            <p>Loading...</p>
                        }

                        else if (schedule.Count == 0)
                        {
                            <p>Розклад пустий</p>
                        }

                        else
                        {

                            <table class="table">

                                <thead>
                                    <tr>
                                        <th>День тижня</th>
                                        <th>Час</th>
                                    </tr>
                                </thead>
                                <tbody>



                                    @if (isEditMode)
                                    {

                                        @foreach (var kvp in schedule)
                                        {
                                            var dayOfWeek = DayOfWeekLocal[(int)kvp.Key];
                                            var tasks = kvp.Value;
                                            <tr>

                                                <td>@dayOfWeek</td>
                                                <td>

                                                    @for (int index = 0; index < tasks.Count; index++)
                                                    {
                                                        var task = tasks[index];
                                                        <div>
                                                            <input type="time" @bind-value="task.StartTime" @bind-value:event="oninput" />
                                                            -
                                                            <input type="time" @bind-value="task.EndTime" @bind-value:event="oninput" />
                                                            <button @onclick="() => RemoveTask(tasks, index -1 )">Видалити</button>
                                                        </div>
                                                    }
                                                    <button @onclick="() => AddNewTask(tasks)">Додати час</button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else

                                    {

                                        @foreach (var kvp in schedule)
                                        {
                                            var dayOfWeek = DayOfWeekLocal[(int)kvp.Key];
                                            var tasks = kvp.Value;
                                            <tr>
                                                <td>@dayOfWeek</td>
                                                <td>
                                                    @foreach (var task in tasks)
                                                    {
                                                        <div>
                                                            @task.StartString - @task.EndString
                                                        </div>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }

                                </tbody>
                            </table>
                        }
                    </div>



                    @if (isEditMode)
                    {

                        <div class="form-group">
                            <label for="name">Ініціали:</label>
                            <input type="text" id="name" class="form-control" @bind="@userProfile.name" />
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <label for="name">@(@userProfile.name != string.Empty ? "Ініціали:" : "")</label>
                            <p id="name" class="form-control-plaintext">@userProfile.name</p>
                        </div>
                    }



                    @if (isEditMode)
                    {
                        <div class="form-group">
                            <label for="faculty">Факультет:</label>
                            <select id="faculty" class="form-control" @onchange="SelectFaculty">
                                @if (allFaculties != null)
                                {
                                    @foreach (var faculty in allFaculties)
                                    {
                                        @if (userProfile.faculty == faculty)
                                        {
                                            <option value="@faculty" selected>@faculty</option>
                                        }
                                        else
                                        {
                                            <option value="@faculty">@faculty</option>
                                        }
                                    }
                                }
                            </select>
                        </div>

                        <div class="five">
                            <label for="description">Опис:</label>
                            <textarea id="description" class="form-control" @bind="@userProfile.description"></textarea>
                        </div>
                    }
                    else
                    {

                        <div class="five">
                            <div class="button-content">
                                <label for="faculty">Факультет:</label>
                                <span>@userProfile.faculty</span>
                            </div>
                            <label for="description">Опис:</label>
                            <p id="description" class="form-control-plaintext">@userProfile.description</p>
                        </div>
                    }
                    @if (isEditMode)
                    {
                        <div class="form-group">
                            <input type="checkbox" id="socialPrivacy" @bind="@userProfile.isfriendsprivate" />
                            <label for="socialPrivacy">Зробити соціальні мережі приватними</label>
                        </div>

                    }
                    <div class="soc">
                        @foreach (var socialLink in userProfile.social)
                        {
                            @if (isEditMode)
                            {
                                <div class="form-group">
                                    <label for="@socialLink.Key">@socialLink.Key:</label>
                                    <input type="text" id="@socialLink.Key" class="form-control" @bind="userProfile.social[socialLink.Key]" />
                                </div>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(socialLink.Value))
                                {
                                    <div class="social">
                                        <a href="@socialLink.Value"><div class="@GetSocialClass(socialLink.Key)"></div></a>
                                    </div>
                                }

                            }
                        }


                    </div>



                    @if (isEditMode)
                    {
                        <div class="subjectSearch">
                            <label for="subjectSearch">Пошук предмету:</label>
                            <input type="text" id="subjectSearch" @bind="subjectSearch" @bind:event="oninput" />

                            <label>Обрані предмети:</label>
                            @if (selectedSubjects.Any())
                            {
                                <ul>
                                    @foreach (var subject in selectedSubjects)
                                    {
                                        <li>@subject <button @onclick="@(() => RemoveSubject(subject))">Видалити</button></li>
                                    }
                                </ul>
                            }
                        </div>
                    }
                    else
                    {

                    }

                    @if (isEditMode)
                    {


                        <div class="searchSubject">

                            <label>Оберіть предмет(и):</label>
                            <select @onchange="OnSubjectsSelected" multiple>
                                @if (filteredSubjects != null)
                                {
                                    @foreach (var subject in filteredSubjects)
                                    {
                                        <option selected=@selectedSubjects.Contains(subject)>@subject</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="subject-group">
                            <label for="subject">Предмети:</label>
                            @if (userProfile.subjects != null && userProfile.subjects.Any())
                            {
                                foreach (var subject in userProfile.subjects)
                                {
                                    if (subject != userProfile.subjects[^1])
                                    {
                                        <span>@subject - </span>
                                    }
                                    else
                                    {
                                        <span>@subject</span>
                                    }
                                }
                            }
                            else
                            {
                                <span>Немає предметів.</span>
                            }
                        </div>
                    }

                    <div class="edit">
                        @if (isEditMode)
                        {
                            <div class="editButtons">
                                <button type="button" class="btn btn-success" @onclick="SaveAllChanges">Save All Changes</button>
                                <button type="button" class="btn btn-dark" @onclick="CancelEdit">Cancel</button>
                            </div>

                        }
                        else
                        {

                        <div class="blueButton">
                            <button class="btn btn-primary" type="button" @onclick="ToggleEditMode">Edit</button>
                        </div>
                        <NavLink class="nav-link" href="" @onclick="Logout">
                            <span class="oi oi-account-logout" aria-hidden="true"></span> Log Out
                        </NavLink>
                    }
                </div>
            </div>
        </body>
    }
    else
    {
        <span class="loader"></span>
    }
}
else
{

    <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
    <span class="loader"></span>
}

@* evgeniypoklov@gmail.com *@
@* Myparol2017 *@
@* evgeniypoklov@gmail.com *@
@* 33 *@
@code {
    const int MAX_RANGES = 4;
    const int MAX_SUBJECTS = 3;

    private string errorMessage;

    private bool isUserAuthenticated;
    private bool isProfileVerified;

    private UpdateProfile originalProfile;
    private UpdateProfile userProfile;
    private string originalUsername;
    private string facultySearch;
    private List<string> allFaculties;
    private IEnumerable<string> filteredFaculties;

    public delegate Task UpdateScheduleDelegate(DayOfWeek dayOfWeek, List<string> tasks);
    private Dictionary<DayOfWeek, List<TimeRange>> schedule;
    private List<string> DayOfWeekLocal = new List<string> {
        "Неділя",
        "Понеділок",
        "Вівторок",
        "Середа",
        "Четвер",
        "П'ятниця",
        "Субота"
    };
    bool isLoaded;
    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();

    private bool isEditMode = false;
    private bool isUsernameEdit = false;
    private string ButtonText => isEditMode ? "Cancel Edit" : "Edit";
    private string timeValidationError = string.Empty;

    private void CheckTimeValidity()
    {
        foreach (var daySchedule in schedule)
        {
            foreach (var timeRange in daySchedule.Value)
            {
                if (!timeRange.IsEndTimeAfterStartTime(timeRange.StartString, timeRange.EndString))
                {
                    timeValidationError = "Час завершення повинен бути пізніше часу початку.";
                    return;
                }
            }
        }


        timeValidationError = null;
    }
    private void ToggleUsernameEdit()
    {
        isUsernameEdit = !isUsernameEdit;
    }

    private async Task CheckUsername()
    {
        if (userProfile.username == originalUsername)
            ToggleUsernameEdit();
        else
        {
            await SaveAllChanges();
            ToggleUsernameEdit();
        }
    }
    private void CancelEdit()
    {
        if (originalProfile != null)
        {
            errorMessage = "";
            userProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(originalProfile));
            isEditMode = false;
            LoadSchedule();
            errorMessage = string.Empty;
            StateHasChanged();
            Console.WriteLine("Edits canceled, changes reverted.");
        }
    }
    private void EnterEditMode()
    {
        originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
        isEditMode = true;
        StateHasChanged();
        Console.WriteLine("Entered edit mode, original profile saved.");
    }
    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
    }
    private string GetSocialClass(string key)
    {
        return key switch
        {
            "instagram" => "circle1",
            "twitter" => "circle2",
            "github" => "circle3",
            "facebook" => "circle4",
            "telegram" => "circle5",
            _ => string.Empty,
        };
    }

    /// <summary>
    /// Метод для додавання нового часу на конкретний день.
    /// </summary>
    private void AddNewTask(List<TimeRange> tasks)
    {
        if (tasks == null)
        {
            tasks = new List<TimeRange>();
        }

        if (tasks.Count < MAX_RANGES)
        {
            tasks.Add(new TimeRange());
            StateHasChanged();
        }
        else
        {
            errorMessage = $"Не можна додати більше {MAX_RANGES} проміжків";
        }
    }


    List<Friend> incomingRequests;

    /// <summary>
    /// Метод, який викликається під час ініціалізації сторінки.
    /// Відповідає за завантаження інформації про користувача з токену який зберігається в localStorage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoaded = false;
            isUserAuthenticated = await IsUserAuthenticatedAsync();
            if (isUserAuthenticated)
            {
                var token = await TokenService.GetToken();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                incomingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/incomingRequests");
                allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
                allFaculties = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/faculties");
                filteredSubjects = allSubjects;
                await LoadUserProfile();
                LoadSchedule();

            }
            else
            {
                errorMessage = "Failed to load user info";
            }
            isLoaded = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private void FilterFaculties()
    {
        if (string.IsNullOrWhiteSpace(facultySearch))
        {
            filteredFaculties = allFaculties;
        }
        else
        {
            filteredFaculties = allFaculties.Where(faculty =>
                faculty.Contains(facultySearch, StringComparison.OrdinalIgnoreCase));
        }
    }
    /// <summary>
    /// Метод для завантаження розкладу з сервера.
    /// </summary>
    private void LoadSchedule()
    {
        try
        {
            if (userProfile != null && userProfile.schedule != null)
            {

                schedule = userProfile.schedule.ToDictionary(
                    kvp => (DayOfWeek)Enum.Parse(typeof(DayOfWeek), kvp.Key),
                    kvp =>
                    {
                        var timeRanges = kvp.Value;
                        foreach (var range in timeRanges)
                        {

                            range.StartString = range.Start.ToString("HH:mm");
                            range.EndString = range.End.ToString("HH:mm");
                        }
                        return timeRanges;
                    }
                );
            }
            else
            {
                errorMessage = "User profile schedule is not available";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing schedule: {ex.Message}");
            errorMessage = "Failed to process schedule";
        }
    }

    private void OnSubjectsSelected(ChangeEventArgs e)
    {
        var options = e.Value as IEnumerable<string>;
        if (options is not null)
        {
            var newSelections = options.Except(selectedSubjects);
            var availableSlots = MAX_SUBJECTS - selectedSubjects.Count;
            if (newSelections.Count() <= availableSlots)
            {
                selectedSubjects.AddRange(newSelections);
            }
            else
            {
                
                selectedSubjects.AddRange(newSelections.Take(availableSlots));
                errorMessage = $"Можна обрати максимум {MAX_SUBJECTS} предметів";
            }
        }
    }

    private void SelectFaculty(ChangeEventArgs e)
    {
        userProfile.faculty = e.Value?.ToString();
    }

    private void UpdateSocialLink(string network, string url)
    {
        if (userProfile.social == null)
            userProfile.social = new Dictionary<string, string>();

        userProfile.social[network] = url;
    }

    /// <summary>
    /// Видаляє вибраний предмет зі списку обраних предметів.
    /// </summary>
    /// <param name="subject">Предмет, який потрібно видалити.</param>
    private void RemoveSubject(string subject)
    {
        selectedSubjects.Remove(subject);
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);

    }


    private string subjectSearch
    {
        get => _subjectSearch;
        set
        {
            if (_subjectSearch != value)
            {
                _subjectSearch = value;
                FilterSubjects();
            }
        }
    }

    /// <summary>
    /// Обробляє вибір користувача зі списку предметів.
    /// </summary>
    /// <param name="subject">Предмет, який вибрано зі списку.</param>
    private void SelectSubject(string subject)
    {
        if (!selectedSubjects.Contains(subject))
        {
            selectedSubjects.Add(subject);
        }
    }

    /// <summary>
    /// Фільтрує список предметів в залежності від того що ввів користувач у пошуку.
    /// </summary>
    private void FilterSubjects()
    {
        if (string.IsNullOrWhiteSpace(subjectSearch))
        {
            filteredSubjects = allSubjects;
        }
        else
        {
            filteredSubjects = allSubjects.Where(subject =>
                subject.Contains(subjectSearch, StringComparison.OrdinalIgnoreCase));
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            userProfile = await UserProfileService.GetProfileAsync();
            originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
            selectedSubjects = userProfile.subjects;
            isProfileVerified = userProfile.isProfileVerified;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing user information: {ex.Message}");
            errorMessage = "Failed to process user information";
        }
    }

    private async Task SaveAllChanges()
    {
        try
        {
            bool isOverlap = false;
            foreach (var daySchedule in schedule)
            {
                if (IsOverlapInDay(daySchedule.Value))
                {
                    isOverlap = true;
                    break;
                }
            }

            if (isOverlap)
            {
                errorMessage = "У графіку є перетинаючі часові проміжки.";
                return;
            }

            CheckTimeValidity();
            if (timeValidationError == null)
            {
                foreach (var daySchedule in schedule)
                {
                    var dayOfWeek = daySchedule.Key.ToString();
                    var tasks = daySchedule.Value;
                    var dtoTimeRanges = tasks.Select(tr => new SoftServeProject3.Core.DTOs.TimeRange
                        {
                            Start = DateTime.Parse(tr.StartString),
                            End = DateTime.Parse(tr.EndString)
                        }).ToList();

                    userProfile.schedule[dayOfWeek] = dtoTimeRanges;
                }
                userProfile.social = userProfile.social ?? new Dictionary<string, string>();
                userProfile.subjects = selectedSubjects;

                var success = await UserProfileService.UpdateProfileAsync(userProfile);
                errorMessage = "";
                if (success)
                {
                    LoadSchedule();
                    StateHasChanged();

                }
                else
                {
                    errorMessage = $"Користувач з нікнеймом {userProfile.username} вже існує. Спробуйте інший.";
                    userProfile.username = originalUsername;
                    StateHasChanged();

                }
                originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
                isEditMode = false;
            }
            else
            {
                errorMessage = $"Час завершення повинен бути пізніше часу початку.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while saving the schedule: {ex.Message}";
        }
    }
    private bool IsOverlapInDay(List<TimeRange> daySchedule)
    {
        for (int i = 0; i < daySchedule.Count; i++)
        {
            for (int j = i + 1; j < daySchedule.Count; j++)
            {
                if (daySchedule[i].IsOverlappingWith(daySchedule[j]))
                {
                    return true;
                }
            }
        }
        return false;
    }
    private bool showMessagePopup = false;

    private void ShowMessagePopup()
    {
        showMessagePopup = true;

    }

    private void HandleClose(bool isClosed)
    {
        showMessagePopup = false;
    }
    /// <summary>
    /// Метод для видалення проміжку часу.
    /// </summary>
    private void RemoveTask(List<TimeRange> tasks, int index)
    {
        Console.WriteLine($"Removing {index}");

        if (tasks == null)
        {
            return;
        }

        if (index < 0 || index >= tasks.Count)
        {
            return;
        }


        tasks.RemoveAt(index);
        StateHasChanged();
    }
    private async Task Logout()
    {
        await TokenService.RemoveToken();
        Navigation.NavigateTo("/login");
    }
}



