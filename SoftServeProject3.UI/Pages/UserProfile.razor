@page "/UserProfile"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;



<head>
    <PageTitle>Профіль</PageTitle>
</head>

@if (isUserAuthenticated)
{

    @if (userProfile != null)
    {

        <body>
            <div class="wrapper">
                <div class="one">
                    <div class="left-links">
                        <a href="#">Home</a>
                        <a href="UserSearch">Пошук студентів</a>
                    </div>
                    <div class="right-links">
                        <a href="UserProfile">Профіль</a>
                    </div>
                </div>

                <div class="two">
                    @if (isEditMode)
                    {
                        if (!isUsernameEdit)
                        {
                            <div style="display: flex;">
                                <h2 style="margin-right: 0;">@userProfile.username</h2>
                                <button @onclick="ToggleUsernameEdit">&#x270E</button>
                            </div>
                        }
                        else
                        {
                            <div style="display: flex;">
                                <input type="text" @bind="userProfile.username" />
                                <button @onclick="CheckUsername">&#x2713</button>
                            </div>
                        }

                    }
                    else
                    {
                        <h2 style="color:black">@userProfile.username</h2>

                    }


                    @if (isEditMode)
                    {
                        <div class="profile-picture-edit">
                            <input type="text" @bind="userProfile.photoUrl" class="form-control" />
                        </div>
                    }

                    else
                    {
                        <div class="profile-picture">
                            <img src="@userProfile.photoUrl" alt="https://img.freepik.com/premium-vector/young-smiling-man-avatar-man-with-brown-beard-mustache-hair-wearing-yellow-sweater-sweatshirt-3d-vector-people-character-illustration-cartoon-minimal-style_365941-860.jpg">
                        </div>
                    }
                </div>
                <div class="three">
                    <h1>Мій розклад</h1>

                    @if (errorMessage != null)
                    {
                        <p class="text-danger">@errorMessage</p>
                    }

                    @if (schedule == null)
                    {
                        <p>Loading...</p>
                    }

                    else if (schedule.Count == 0)
                    {
                        <p>Розклад пустий</p>
                    }

                    else
                    {

                        <table class="table">

                            <thead>
                                <tr>
                                    <th>День тижня</th>
                                    <th>Час</th>
                                </tr>
                            </thead>
                            <tbody>



                                @if (isEditMode)
                                {

                                    @foreach (var kvp in schedule)
                                    {
                                        var dayOfWeek = DayOfWeekLocal[(int)kvp.Key];
                                        var tasks = kvp.Value;
                                        <tr>

                                            <td>@dayOfWeek</td>
                                            <td>

                                                @for (int index = 0; index < tasks.Count; index++)
                                                {
                                                    var task = tasks[index];
                                                    <div>
                                                        <input type="time" @bind-value="task.StartTime" @bind-value:event="oninput" />
                                                        -
                                                        <input type="time" @bind-value="task.EndTime" @bind-value:event="oninput" />
                                                        <button @onclick="() => RemoveTask(tasks, index -1 )">Видалити</button>
                                                    </div>
                                                }
                                                <button @onclick="() => AddNewTask(tasks)">Додати час</button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else

                                {

                                    @foreach (var kvp in schedule)
                                    {
                                        var dayOfWeek = DayOfWeekLocal[(int)kvp.Key];
                                        var tasks = kvp.Value;
                                        <tr>
                                            <td>@dayOfWeek</td>
                                            <td>
                                                @foreach (var task in tasks)
                                                {
                                                    <div>
                                                        @task.StartString - @task.EndString
                                                    </div>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    }
                </div>



                @if (isEditMode)
                {

                    <div class="form-group">
                        <label for="name">Ініціали:</label>
                        <input type="text" id="name" class="form-control" @bind="@userProfile.name" />
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label for="name">@(@userProfile.name != string.Empty ? "Ініціали:" : "")</label>
                        <p id="name" class="form-control-plaintext">@userProfile.name</p>
                    </div>
                }



                @if (isEditMode)
                {
                    <div class="form-group">
                        <label for="faculty">Факультет:</label>
                        <select id="faculty" class="form-control" @onchange="SelectFaculty">
                            @if (allFaculties != null)
                            {
                                @foreach (var faculty in allFaculties)
                                {
                                    @if (userProfile.faculty == faculty)
                                    {
                                        <option value="@faculty" selected>@faculty</option>
                                    }
                                    else
                                    {
                                        <option value="@faculty">@faculty</option>
                                    }
                                }
                            }
                        </select>
                    </div>

                    <div class="five">
                        <label for="description">Опис:</label>
                        <textarea id="description" class="form-control" @bind="@userProfile.description"></textarea>
                    </div>
                }
                else
                {

                    <div class="five">
                        <div class="button-content">
                            <label for="faculty">Факультет:</label>
                            <span>@userProfile.faculty</span>
                        </div>
                        <label for="description">Опис:</label>
                        <p id="description" class="form-control-plaintext">@userProfile.description</p>
                    </div>
                }

                <div class="soc">
                    @foreach (var socialLink in userProfile.social)
                    {
                        @if (isEditMode)
                        {
                            <div class="form-group">
                                <label for="@socialLink.Key">@socialLink.Key:</label>
                                <input type="text" id="@socialLink.Key" class="form-control" @bind="userProfile.social[socialLink.Key]" />
                            </div>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(socialLink.Value))
                            {
                                <div class="social">
                                    <a href="@socialLink.Value"><div class="@GetSocialClass(socialLink.Key)"></div></a>
                                </div>
                            }

                        }
                    }


                </div>



                @if (isEditMode)
                {
                    <div class="subjectSearch">
                        <label for="subjectSearch">Пошук предмету:</label>
                        <input type="text" id="subjectSearch" @bind="subjectSearch" @bind:event="oninput" />

                        <label>Обрані предмети:</label>
                        @if (selectedSubjects.Any())
                        {
                            <ul>
                                @foreach (var subject in selectedSubjects)
                                {
                                    <li>@subject <button @onclick="@(() => RemoveSubject(subject))">Видалити</button></li>
                                }
                            </ul>
                        }
                    </div>
                }
                else
                {

                }

                @if (isEditMode)
                {


                    <div class="searchSubject">

                        <label>Оберіть предмет(и):</label>
                        <select @onchange="OnSubjectsSelected" multiple>
                            @if (filteredSubjects != null)
                            {
                                @foreach (var subject in filteredSubjects)
                                {
                                    <option selected=@selectedSubjects.Contains(subject)>@subject</option>
                                }
                            }
                        </select>
                    </div>
                }
                else
                {
                    <div class="subject-group">
                        <label for="subject">Предмети:</label>
                        @if (userProfile.subjects != null && userProfile.subjects.Any())
                        {
                            foreach (var subject in userProfile.subjects)
                            {
                                if (subject != userProfile.subjects[^1])
                                {
                                    <span>@subject - </span>
                                }
                                else
                                {
                                    <span>@subject</span>
                                }
                            }
                        }
                        else
                        {
                            <span>Немає предметів.</span>
                        }
                    </div>
                }

                <div class="edit">
                    @if (isEditMode)
                    {
                        <div class="editButtons">
                            <button type="button" class="btn btn-success" @onclick="SaveAllChanges">Save All Changes</button>
                            <button type="button" class="btn btn-dark" @onclick="CancelEdit">Cancel</button>
                        </div>

                    }
                    else
                    {

                        <div class="blueButton">
                            <button class="btn btn-primary" type="button" @onclick="ToggleEditMode">Edit</button>
                        </div>
                    }
                </div>
            </div>
        </body>
    }
    else
    {
        <span class="loader"></span>
    }
}
else
{
    <span class="loader"></span>
    <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
}

@* evgeniypoklov@gmail.com *@
@* Myparol2017 *@
@* evgeniypoklov@gmail.com *@
@* 33 *@
@code {
    private string errorMessage;

    private bool isUserAuthenticated;

    private UpdateProfile originalProfile;
    private UpdateProfile userProfile;
    private string originalUsername;
    private string facultySearch;
    private List<string> allFaculties;
    private IEnumerable<string> filteredFaculties;

    
    public delegate Task UpdateScheduleDelegate(DayOfWeek dayOfWeek, List<string> tasks);
    private Dictionary<DayOfWeek, List<TimeRange>> schedule;
    private List<string> DayOfWeekLocal = new List<string> {
        "Неділя",
        "Понеділок",
        "Вівторок",
        "Середа",
        "Четвер",
        "П'ятниця",
        "Субота"
    };

    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();

    private bool isEditMode = false;
    private bool isUsernameEdit = false;
    private string ButtonText => isEditMode ? "Cancel Edit" : "Edit";
    private string timeValidationError;

    private void CheckTimeValidity()
    {
        foreach (var daySchedule in schedule)
        {
            foreach (var timeRange in daySchedule.Value)
            {
                if (!timeRange.IsEndTimeAfterStartTime(timeRange.StartString, timeRange.EndString))
                {
                    timeValidationError = "Час завершення повинен бути пізніше часу початку.";
                    return;
                }
            }
        }


        timeValidationError = null;
    }
    private void ToggleUsernameEdit()
    {
        isUsernameEdit = !isUsernameEdit;
    }

    private async Task CheckUsername()
    {
        if (userProfile.username == originalUsername)
            ToggleUsernameEdit();
        else
        {
            await SaveAllChanges();
            ToggleUsernameEdit();
        }
    }
    private void CancelEdit()
    {
        if (originalProfile != null)
        {
            userProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(originalProfile));
            isEditMode = false;
            LoadSchedule();
            StateHasChanged();
            Console.WriteLine("Edits canceled, changes reverted.");
        }
    }
    private void EnterEditMode()
    {
        originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
        isEditMode = true;
        StateHasChanged();
        Console.WriteLine("Entered edit mode, original profile saved.");
    }
    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
    }
    private string GetSocialClass(string key)
    {
        return key switch
        {
            "instagram" => "circle1",
            "twitter" => "circle2",
            "github" => "circle3",
            "facebook" => "circle4",
            "telegram" => "circle5",
            _ => string.Empty,
        };
    }

    /// <summary>
    /// Метод для додавання нового часу на конкретний день.
    /// </summary>
    private void AddNewTask(List<TimeRange> tasks)
    {
        if (tasks == null)
        {
            tasks = new List<TimeRange>();
        }

        tasks.Add(new TimeRange());
        StateHasChanged();
    }

    /// <summary>
    /// Метод для часу до розкладу на конкретний день.
    /// </summary>
    private void AddTask(DayOfWeek dayOfWeek)
    {
        if (!schedule.ContainsKey(dayOfWeek))
        {
            schedule[dayOfWeek] = new List<TimeRange>();
        }

        schedule[dayOfWeek].Add(new TimeRange());
    }

    /// <summary>
    /// Метод, який викликається під час ініціалізації сторінки.
    /// Відповідає за завантаження інформації про користувача з токену який зберігається в localStorage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {

            isUserAuthenticated = await IsUserAuthenticatedAsync();
            if (isUserAuthenticated)
            {
                allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
                allFaculties = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/faculties");
                filteredSubjects = allSubjects;
                await LoadUserProfile();
                originalUsername = userProfile.username;
                LoadSchedule();

            }
            else
            {
                errorMessage = "Failed to load user info";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private void FilterFaculties()
    {
        if (string.IsNullOrWhiteSpace(facultySearch))
        {
            filteredFaculties = allFaculties;
        }
        else
        {
            filteredFaculties = allFaculties.Where(faculty =>
                faculty.Contains(facultySearch, StringComparison.OrdinalIgnoreCase));
        }
    }
    /// <summary>
    /// Метод для завантаження розкладу з сервера.
    /// </summary>
    private void LoadSchedule()
    {
        try
        {
            if (userProfile != null && userProfile.schedule != null)
            {

                schedule = userProfile.schedule.ToDictionary(
                    kvp => (DayOfWeek)Enum.Parse(typeof(DayOfWeek), kvp.Key),
                    kvp =>
                    {
                        var timeRanges = kvp.Value;
                        foreach (var range in timeRanges)
                        {

                            range.StartString = range.Start.ToString("HH:mm");
                            range.EndString = range.End.ToString("HH:mm");
                        }
                        return timeRanges;
                    }
                );
            }
            else
            {
                errorMessage = "User profile schedule is not available";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing schedule: {ex.Message}");
            errorMessage = "Failed to process schedule";
        }
    }

    private void OnSubjectsSelected(ChangeEventArgs e)
    {
        var options = e.Value as IEnumerable<string>;
        if (options is not null)
        {
            selectedSubjects.AddRange(options.Except(selectedSubjects));
        }
    }

    private void SelectFaculty(ChangeEventArgs e)
    {
        userProfile.faculty = e.Value?.ToString();
    }

    private void UpdateSocialLink(string network, string url)
    {
        if (userProfile.social == null)
            userProfile.social = new Dictionary<string, string>();

        userProfile.social[network] = url;
    }

    /// <summary>
    /// Видаляє вибраний предмет зі списку обраних предметів.
    /// </summary>
    /// <param name="subject">Предмет, який потрібно видалити.</param>
    private void RemoveSubject(string subject)
    {
        selectedSubjects.Remove(subject);
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);

    }


    private string subjectSearch
    {
        get => _subjectSearch;
        set
        {
            if (_subjectSearch != value)
            {
                _subjectSearch = value;
                FilterSubjects();
            }
        }
    }

    /// <summary>
    /// Обробляє вибір користувача зі списку предметів.
    /// </summary>
    /// <param name="subject">Предмет, який вибрано зі списку.</param>
    private void SelectSubject(string subject)
    {
        if (!selectedSubjects.Contains(subject))
        {
            selectedSubjects.Add(subject);
        }
    }

    /// <summary>
    /// Фільтрує список предметів в залежності від того що ввів користувач у пошуку.
    /// </summary>
    private void FilterSubjects()
    {
        if (string.IsNullOrWhiteSpace(subjectSearch))
        {
            filteredSubjects = allSubjects;
        }
        else
        {
            filteredSubjects = allSubjects.Where(subject =>
                subject.Contains(subjectSearch, StringComparison.OrdinalIgnoreCase));
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            userProfile = await UserProfileService.GetProfileAsync();
            originalProfile = userProfile;
            selectedSubjects = userProfile.subjects;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing user information: {ex.Message}");
            errorMessage = "Failed to process user information";
        }
    }

    private async Task SaveAllChanges()
    {
        try
        {
            CheckTimeValidity();
            if (timeValidationError == null)
            {
                foreach (var daySchedule in schedule)
                {
                    var dayOfWeek = daySchedule.Key.ToString();
                    var tasks = daySchedule.Value;
                    var dtoTimeRanges = tasks.Select(tr => new SoftServeProject3.Core.DTOs.TimeRange
                        {
                            Start = DateTime.Parse(tr.StartString),
                            End = DateTime.Parse(tr.EndString)
                        }).ToList();

                    userProfile.schedule[dayOfWeek] = dtoTimeRanges;
                }
                userProfile.social = userProfile.social ?? new Dictionary<string, string>();
                userProfile.subjects = selectedSubjects;

                var success = await UserProfileService.UpdateProfileAsync(userProfile);
                errorMessage = "";
                if (success)
                {

                    LoadSchedule();
                    StateHasChanged();

                }
                else
                {

                    errorMessage = $"Користувач з нікнеймом {userProfile.username} вже існує. Спробуйте інший.";
                    userProfile.username = originalUsername;
                    StateHasChanged();

                }
                originalProfile = JsonConvert.DeserializeObject<UpdateProfile>(JsonConvert.SerializeObject(userProfile));
                isEditMode = false;
            }
            else
            {


                errorMessage = $"Час завершення повинен бути пізніше часу початку.";



            }


        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while saving the schedule: {ex.Message}";
        }
    }

    /// <summary>
    /// Метод для видалення проміжку часу.
    /// </summary>
    private void RemoveTask(List<TimeRange> tasks, int index)
    {
        Console.WriteLine($"Removing {index}");

        if (tasks == null)
        {
            return;
        }

        if (index < 0 || index >= tasks.Count)
        {
            return;
        }


        tasks.RemoveAt(index);
        StateHasChanged();
    }

}



