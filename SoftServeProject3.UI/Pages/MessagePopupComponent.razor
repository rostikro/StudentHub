@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@using System.Net.Http.Headers;
@using SoftServeProject3.UI.Services;
@using SoftServeProject3.Core.DTOs;
@using Microsoft.AspNetCore.SignalR.Client;

@if (IsVisible)
{
    <div class="message-popup">
        <div class="message-content">
            <table>
                @if (incomingRequests.Any())
                {
                    foreach (var friend in incomingRequests)
                    {
                        <tr>
                            <td>
                                <div>
                                    @{
                                        string incomingRequestPhotoUrl = string.IsNullOrEmpty(friend.photoUrl)
                                        ? "https://t4.ftcdn.net/jpg/05/89/93/27/360_F_589932782_vQAEAZhHnq1QCGu5ikwrYaQD0Mmurm0N.jpg"
                                        : friend.photoUrl;
                                    }
                                    <img src="@incomingRequestPhotoUrl" alt="Фото профілю" class="round-profile-picture" onerror="this.onerror=null; this.src='https://t4.ftcdn.net/jpg/05/89/93/27/360_F_589932782_vQAEAZhHnq1QCGu5ikwrYaQD0Mmurm0N.jpg';" />
                                </div>
                                <a href="UserProfile/@friend.username" style="color: black; text-decoration: none;">@friend.username</a>
                            </td>
                            <td>

                            </td>
                            <td><button class="reds" style="background-color: limegreen; color: white;" @onclick="() => AddFriend(friend.username)">Прийняти</button></td>
                            <td><button style="background-color: red; color: white" @onclick="() => IgnoreFriend(friend.username)">Ігнорувати</button></td>
                        </tr>
                    }
                }
                else
                {
                    <p>Немає запитів на дружбу</p>
                }
            </table>
            <button class="close-button" style="background-color: red; color: black" @onclick="ClosePopup">×</button>
        </div>
    </div>
}
@code {
    [Parameter]
    public bool IsVisible { get; set; }
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    private List<Friend> incomingRequests = new List<Friend>();
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    UserModel myProfile;  

    public void Show()
    {
        IsVisible = true;
    }

    public async Task ClosePopup()
    {
        IsVisible = false;
        await OnClose.InvokeAsync(false);
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetToken();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7292/chatHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();
        hubConnection.On<string>("UpdateOutgoingList", (username) =>
        {

            UpdateIndicator();
            StateHasChanged();
        });
        await hubConnection.StartAsync();
        
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        myProfile = await Http.GetFromJsonAsync<UserModel>($"https://localhost:7292/Users/profile/");
        incomingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/incomingRequests");
    }
    private async Task UpdateIndicator()
    {
        incomingRequests = await Http.GetFromJsonAsync<List<Friend>>("https://localhost:7292/Users/friends/incomingRequests");
        StateHasChanged();
    }

    private async Task AddFriend(string FriendUsername)
    {
        var token = await TokenService.GetToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.PostAsync($"https://localhost:7292/Users/acceptFriendRequest?target={FriendUsername}", null);
        UpdateIndicator();
        await hubConnection.SendAsync("UpdateOutgoingList", FriendUsername);
        await hubConnection.SendAsync("UpdateOutgoingList", myProfile.Username);
    }

    private async Task IgnoreFriend(string FriendUsername)
    {
        var token = await TokenService.GetToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.PostAsync($"https://localhost:7292/Users/ignoreFriendRequest?target={FriendUsername}", null);
        UpdateIndicator();
        await hubConnection.SendAsync("UpdateOutgoingList", FriendUsername);
        await hubConnection.SendAsync("UpdateOutgoingList", myProfile.Username);
    }
    
    
}