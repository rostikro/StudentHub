@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TokenService TokenService
@using SoftServeProject3.UI.Data
@using Microsoft.AspNetCore.WebUtilities;
@using SoftServeProject3.UI.Services;
@using SoftServeProject3.Core.DTOs;


@if (!isUserAuthenticated)
{
    <head>
        <PageTitle>Log In</PageTitle>
        <script src="https://accounts.google.com/gsi/client" async defer></script>
    </head>

    <body>
        <div class="container">
            <h1>Вхід</h1>
            <p>Будь ласка, заповніть наступні поля, щоб увійти на сайт.</p>
            <hr>
            <EditForm OnValidSubmit="@AttemptLogin" EditContext="@editContext">
                <DataAnnotationsValidator />
                <label><b>Ім'я користувача або пошта</b></label>
                <StyledInputText placeholder="Введіть ім'я користувача або пошту" maxLength="50" @bind-Value="loginModel.EmailorUsername"
                @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => loginModel.EmailorUsername = __value, loginModel.EmailorUsername)"
                @onkeyup="EventCallback.Factory.Create(this, () =>
                EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => loginModel.EmailorUsername))))" />
                <p><ValidationMessage For="@(()=>loginModel.EmailorUsername)" /></p>
                <label for="password"><b>Пароль:</b></label>
                <StyledInputText type="password" placeholder="Введіть пароль" @bind-Value="loginModel.Password"
                @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => loginModel.Password = __value, loginModel.Password)"
                @onkeyup="EventCallback.Factory.Create(this, () =>
                EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => loginModel.Password))))" />
                <p>
                    <ValidationMessage For="@(()=>loginModel.Password)" />
                </p>
                @if (errorMessage != "")
                {
                    <p id="error-message" class="@ErrorPulse"> @errorMessage</p>
                }
                @* error field *@
                @*                 @if (!(errorMessage == ""))
            {
            } *@
                <button type="submit" disabled="@isLoginDisabled" class="@loginButtonClass">Увійти</button>
            </EditForm>

            <p></p>
            <div style="display: flex; justify-content: center;">
                <div id="g_id_onload"
                     data-client_id="357565124142-s9gtqe39vomlthcsqgorb32ltq65i3o8.apps.googleusercontent.com"
                     data-context="signin"
                     data-ux_mode="popup"
                     data-login_uri="https://localhost:7292/Users/login/google"
                     data-nonce=""
                     data-auto_prompt="false">
                </div>

                <div style="align-content:center">
                    <div class="g_id_signin"
                         data-type="standard"
                         data-shape="rectangular"
                         data-theme="filled_blue"
                         data-text="continue_with"
                         data-size="large"
                         data-logo_alignment="center"
                         data-width="420">
                    </div>
                </div>
            </div>


            <hr>

        </div>

        <div class="registration-link">
            <p>Ще не зареєстровані? <a href="/RegistrationPage">Зареєструватися</a></p>
        </div>

        <div class="forgot-password-link">
            <p>Забули пароль? <a href="/checking_mail">Скидання паролю</a></p>
        </div>
    </body>
}
else
{
    Navigation.NavigateTo("/");
}
@code {
    private string errorMessage = "";

    private bool isLoginDisabled = true;
    private bool isUserAuthenticated;
    private string loginButtonClass => isLoginDisabled ? "loginbtn-disabled" : "loginbtn-enabled";

    private string ErrorPulse;

    EditContext editContext { get; set; }

    UserLoginModel loginModel = new UserLoginModel();

    /// <summary>
    /// Спроба авторизації користувача з використанням його електронної пошти/імені користувача та пароля.
    /// </summary>
    private async Task AttemptLogin()
    {
        ErrorPulse = "";

        UserLoginModel loginRequest = new UserLoginModel
            {
                EmailorUsername = loginModel.EmailorUsername,
                Password = loginModel.Password
            };

        var response = await Http.PostAsJsonAsync("https://localhost:7292/Users/login", loginRequest);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                //deattaching HandleFieldChanged
                Dispose();

                errorMessage = "";
                await TokenService.StoreToken(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Щось пішло не так:( Будь ласка, перевірте ваш логін та пароль.";
            }
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            ErrorPulse = "pulse";
        }

    }
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        var editContext = sender as EditContext;
        var fieldIdentifier = e.FieldIdentifier;
        // Get the type of the model
        var modelType = editContext.Model.GetType();

        // Get the value of the field
        var fieldProperty = fieldIdentifier.Model.GetType().GetProperty(fieldIdentifier.FieldName);

        var fieldValue = fieldProperty.GetValue(fieldIdentifier.Model);

        // Get all properties of the model
        var properties = modelType.GetProperties();
        if (!string.IsNullOrWhiteSpace(fieldValue as string))
        {
            // Iterate over each property
            foreach (var property in properties)
            {
                // Get the value of the property
                var value = property.GetValue(editContext.Model);

                // Check if the value is not null or whitespace
                if (string.IsNullOrWhiteSpace(value?.ToString()) && property.Name != fieldProperty.Name)
                {
                    isLoginDisabled = true;
                    StateHasChanged();
                    return;
                }
            }
            isLoginDisabled = false;
            StateHasChanged();
        }
        else
        {
            isLoginDisabled = true;
            StateHasChanged();
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }

    /// <summary>
    /// Викликається під час ініціалізації сторінки.
    /// </summary>
    /// private bool isUserAuthenticated;
    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(loginModel);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;

        base.OnInitialized();

        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (!isUserAuthenticated)
        {
            var uri = new Uri(Navigation.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                await TokenService.StoreToken(token.ToString());
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
        else
        {
            errorMessage = "Failed to load user info";

        }

    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= EditContext_OnFieldChanged;

    }
}


