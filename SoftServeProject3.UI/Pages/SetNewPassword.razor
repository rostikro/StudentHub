@page "/reset-password"
@using SoftServeProject3.Core.DTOs;
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities;
@inject HttpClient Http
@inject NavigationManager Navigation
@using SoftServeProject3.Core.DTOs;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TokenService TokenService
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@if (!isUserAuthenticated)
{
    <head>
        <PageTitle>Set New Password</PageTitle>
    </head>

    <h3>Set your new password</h3>
    <body>
        <EditForm Model="@resetPassword" OnValidSubmit="@AttemptChange">
            <DataAnnotationsValidator />
            <label>New password:</label>
            <div class="input-group">
                <input @bind="resetPassword.Password" type="password" class="form-control" id="password">
                <span class="input-group-text">
                    <span class="input-group-text"><i id="togglePassword" class="fa fa-eye"></i></span>
                </span>
            </div>
            <p><ValidationMessage For="@(()=>resetPassword.Password)" /></p>
            <label>Confirm password:</label>
            <div class="input-group">
                <input @bind="resetPassword.ConfirmPassword" type="password" class="form-control" id="password">
                <span class="input-group-text">
                    <span class="input-group-text"><i id="togglePassword" class="fa fa-eye"></i></span>
                </span>
            </div>
            <p><ValidationMessage For="@(()=>resetPassword.ConfirmPassword)" /></p>
            <button type="submit">Set new password</button>
            <p>@errorMessage</p>
        </EditForm>
        @* script for eyes to see password *@
        <script>
            var password = document.getElementById('password');
            var togglePassword = document.getElementById('togglePassword');

            togglePassword.addEventListener('click', function (e) {
            // toggle the type attribute
            const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
            password.setAttribute('type', type);
            // toggle the eye / eye slash icon
            this.classList.toggle('fa-eye-slash');
            });
        </script>
    </body>
}
else
{
    Navigation.NavigateTo("/UserProfile");
}

@code {
    private string errorMessage = "";

    ResetPasswordModel resetPassword = new ResetPasswordModel();
    private bool isUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        try
        {

            isUserAuthenticated = await IsUserAuthenticatedAsync();




        }
        catch (Exception ex)
        {

        }
    }
    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }
    private async Task AttemptChange()
    {

        var uri = new Uri(Navigation.Uri);

        //trying to get code from the navigation link
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var linkCode))
        {
            resetPassword.HashCode = linkCode.ToString();
        }
        else
        {
            errorMessage = "Щось пішло не так : (";
        }


        var response = await Http.PostAsJsonAsync($"https://localhost:7292/Users/reset-password", resetPassword);


        if (response.IsSuccessStatusCode)
        {
            errorMessage = "";
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }
}