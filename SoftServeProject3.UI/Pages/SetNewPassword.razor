@page "/reset-password"
@using SoftServeProject3.Core.DTOs;
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TokenService TokenService
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@using System.ComponentModel.DataAnnotations;


@if (!isUserAuthenticated)
{
    <head>
        <PageTitle>Новий Пароль</PageTitle>
    </head>

    <body>
        <div>
            <h1>Встановіть новий пароль</h1>
            <EditForm Model="@resetPassword" OnValidSubmit="@AttemptChange">

                <label>Новий пароль:</label>
                <StyledInputText @bind-Value="resetPassword.Password" type="password" id="password"
                @oninput="EventCallback.Factory.Create(this, HandlePasswordInput)" />
                <p id="field-error-message">@PasswordFieldError</p>

                <label>Підтвердження паролю:</label>
                <StyledInputText @bind-Value="resetPassword.ConfirmPassword" type="password" id="password"
                @oninput="EventCallback.Factory.Create(this, HandleConfirmPasswordInput)" />
                <p id="field-error-message">@ConfirmPasswordFieldError</p>
                <button type="submit" disabled="@isResetDisabled" class="@resetButtonClass">Змінити пароль</button>
            </EditForm>
            @* error field *@
            @if (errorMessage != "")
            {
                <p id="error-message" class="@ErrorPulseClass"> @errorMessage</p>
            }
        </div>
    </body>
}
else
{
    Navigation.NavigateTo("/UserProfile");
}

@code {

    private string errorMessage = "";
    private string PasswordFieldError = "";
    private string ConfirmPasswordFieldError = "";

    private bool isResetDisabled = true;
    private string resetButtonClass => isResetDisabled ? "resetbtn-disabled" : "resetbtn-enabled";
    private string ErrorPulseClass = "";

    EditContext editContext;
    ResetPasswordModel resetPassword = new ResetPasswordModel();
    private bool isUserAuthenticated;

    void HandlePasswordInput(ChangeEventArgs e)
    {
        // Update the variable
        string input = e.Value.ToString();
        resetPassword.Password = input.Replace(" ", "");

        var validationContext = new ValidationContext(resetPassword) { MemberName = nameof(resetPassword.Password) };
        var validationResults = new List<ValidationResult>();
        Validator.TryValidateProperty(resetPassword.Password, validationContext, validationResults);
        PasswordFieldError = validationResults.Any() ? validationResults[0].ErrorMessage : "";

        if (string.IsNullOrEmpty(PasswordFieldError))
            EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => resetPassword.Password)));
    }

    void HandleConfirmPasswordInput(ChangeEventArgs e)
    {
        // Update the variable
        string input = e.Value.ToString();
        resetPassword.ConfirmPassword = input.Replace(" ", "");

        var validationContext = new ValidationContext(resetPassword) { MemberName = nameof(resetPassword.ConfirmPassword) };
        var validationResults = new List<ValidationResult>();
        Validator.TryValidateProperty(resetPassword.ConfirmPassword, validationContext, validationResults);
        ConfirmPasswordFieldError = validationResults.Any() ? validationResults[0].ErrorMessage : "";

        if (string.IsNullOrEmpty(ConfirmPasswordFieldError))
            EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => resetPassword.Password)));
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        var editContext = sender as EditContext;
        var fieldIdentifier = e.FieldIdentifier;
        // Get the type of the model
        var modelType = editContext.Model.GetType();

        // Get the value of the field
        var fieldProperty = fieldIdentifier.Model.GetType().GetProperty(fieldIdentifier.FieldName);
        var fieldValue = fieldProperty.GetValue(fieldIdentifier.Model);

        // Get all properties of the model
        var properties = modelType.GetProperties();
        if (!string.IsNullOrWhiteSpace(fieldValue as string))
        {
            // Iterate over each property
            foreach (var property in properties)
            {
                // Get the value of the property
                var value = property.GetValue(editContext.Model);

                // Check if the value is not null or whitespace
                if (string.IsNullOrWhiteSpace(value?.ToString()) && property.Name != fieldProperty.Name)
                {
                    isResetDisabled = true;
                    StateHasChanged();
                    return;
                }
            }
            isResetDisabled = false;
            StateHasChanged();

        }
        else
        {
            isResetDisabled = true;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ErrorPulseClass = "";
        try
        {
            editContext = new EditContext(resetPassword);
            isUserAuthenticated = await IsUserAuthenticatedAsync();

            var uri = new Uri(Navigation.Uri);

            //trying to get code from the navigation link
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var linkCode))
            {
                resetPassword.HashCode = linkCode.ToString();
            }
            else
            {
                errorMessage = "Будь ласка, підтвердіть свою пошту перед тим, як змінити пароль.";
                ErrorPulseClass = "pulse";
                return;
            }
        }
        catch (Exception ex)
        {

        }
    }
    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }
    private async Task AttemptChange()
    {
        ErrorPulseClass = "";

        var response = await Http.PostAsJsonAsync($"https://localhost:7292/Users/reset-password", resetPassword);

        if (response.IsSuccessStatusCode)
        {
            errorMessage = "";
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }
}