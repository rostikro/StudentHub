@page "/registrationpage"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TokenService TokenService
@inject HttpClient Http
@inject NavigationManager Navigation
@using SoftServeProject3.UI.Data
@using Microsoft.AspNetCore.WebUtilities;
@using SoftServeProject3.Core.DTOs;
@using SoftServeProject3.UI.Services;
@using System.ComponentModel.DataAnnotations;



@if (!isUserAuthenticated)
{
    <head>
        <PageTitle>Реєстрація</PageTitle>
        <script src="https://accounts.google.com/gsi/client" async defer></script>
    </head>
    <body>
        <div class="container">

            @if (!isCodeSent)
            {
                <h1>Реєстрація</h1>
                <p>Будь ласка, заповніть цю форму, щоб зареєструватися на сайті.</p>
                <hr>
                <EditForm OnValidSubmit="@Register" EditContext="@editContext">
                    <DataAnnotationsValidator />
                    <label for="username"><b>Ім'я користувача</b></label>
                    <StyledInputText placeholder="Введіть нікнейм" maxLength="20" @bind-Value="regModel.Username"
                    @oninput="EventCallback.Factory.Create(this, HandleUsernameInput)" />
                    <p id="field-error-message">@UsernameFieldError</p>

                    <label for="email"><b>Пошта</b></label>
                    <StyledInputText placeholder="Введіть пошту" type="email" @bind-Value="regModel.Email"
                    @oninput="EventCallback.Factory.Create(this, HandleEmailInput)" />
                    <p id="field-error-message">@EmailFieldError</p>

                    <label for="password"><b>Пароль</b></label>
                    <StyledInputText placeholder="Введіть пароль" type="password" @bind-Value="regModel.Password"
                    @oninput="EventCallback.Factory.Create(this, HandlePasswordInput)" />
                    <p id="field-error-message">@PasswordFieldError</p>

                    <label for="repeatPassword"><b>Повторіть пароль</b></label>
                    <StyledInputText placeholder="Повторіть ваш пароль" type="password" @bind-Value="regModel.ConfirmPassword"
                    @oninput="EventCallback.Factory.Create(this, HandleConfirmPasswordInput)" />
                    <p id="field-error-message">@ConfirmPasswordFieldError</p>
                    <hr>
                    @* error field *@
                    @if (errorMessage != "")
                    {
                        <p id="error-message" class="@ErrorPulseClass"> @errorMessage</p>
                    }

                    <button type="submit" disabled="@isRegDisabled" class="@registerButtonClass">Зареєструватися</button>
                </EditForm>
                <p></p>
                <div style="display: flex; justify-content: center;">
                    <div id="g_id_onload"
                         data-client_id="357565124142-s9gtqe39vomlthcsqgorb32ltq65i3o8.apps.googleusercontent.com"
                         data-context="signin"
                         data-ux_mode="popup"
                         data-login_uri="https://localhost:7292/Users/login/google"
                         data-nonce=""
                         data-auto_prompt="false">
                    </div>

                    <div style="align-content:center">
                        <div class="g_id_signin"
                             data-type="standard"
                             data-shape="rectangular"
                             data-theme="filled_blue"
                             data-text="continue_with"
                             data-size="large"
                             data-logo_alignment="center"
                             data-width="420">
                        </div>
                    </div>
                </div>
                <hr>
                <div class="login-link">
                    <p>Вже зареєстровані? <a href="/login">Увійти</a></p>
                </div>
            }
            else
            {
                
                    <h1>Підтвердження пошти</h1>
                    <p>Код верифікації був відправлений на <b>@regModel.Email</b>.</p>
                    <p>Будь ласка, підтвердіть, що пошта ваша, ввівши код у поле нижче.</p>
                    <hr>

                    <label><b>Поле для коду:</b></label>
                    <input @bind="code" type="text" class="inputfld" placeholder="Введіть ваш код" />
                @if (!isCodeVerified)
                {
                    @if (errorMessage != "")
                    {
                        <p id="error-message" class="@ErrorPulseClass"> @errorMessage</p>
                    }
                    <div style="display: flex; gap: 20px;">
                        <button type="submit" @onclick="VerifyCode" class="confirmationbtns">Підтвердити</button>
                    <button @onclick="SendCode" class="confirmationbtns">Відправити код знову</button>
                    <button @onclick="ResetForm" class="confirmationbtns">Повернутися</button>
                </div>

                }
            }

            @if (isCodeVerified)
            {
                <p>By creating an account you agree to our <a href="#">Terms & Privacy</a>.</p>
                <button @onclick="Register" class="registerbtn-enabled">Завершити реєстрацію</button>
            }
        </div>
    </body>
}
else
{
    Navigation.NavigateTo("/UserProfile");
}



@code {
    private string errorMessage = "";

    private string UsernameFieldError = "";
    private string EmailFieldError = "";
    private string PasswordFieldError = "";
    private string ConfirmPasswordFieldError = "";

    private string ErrorPulseClass = "";

    private bool isCodeSent = false;
    private bool isCodeVerified = false;
    private bool isEmailConfirmed = false;
    private bool isUserAuthenticated;
    EditContext editContext;

    UserRegistrationModel regModel = new UserRegistrationModel();

    private bool isRegDisabled = true;

    private string code = "";
    private string errorMessageId = "error-message-nondisplay";
    private string registerButtonClass => isRegDisabled ? "registerbtn-disabled" : "registerbtn-enabled";
    private string confirmRegisterButtonClass => isCodeVerified ? "registerbtn-enabled" : "registerbtn-disabled";

    #region InputHandlers
    void HandleUsernameInput(ChangeEventArgs e)
    {
        // Update the variable
        string input = e.Value.ToString();
        regModel.Username = input.Replace(" ", "");

        EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => regModel.Username)));

        var validationContext = new ValidationContext(regModel) { MemberName = nameof(regModel.Username) };
        var validationResults = new List<ValidationResult>();
        Validator.TryValidateProperty(regModel.Username, validationContext, validationResults);
        UsernameFieldError = validationResults.Any() ? validationResults[0].ErrorMessage : "";
    }

    void HandleEmailInput(ChangeEventArgs e)
    {
        // Update the variable
        string input = e.Value.ToString();
        regModel.Email = input.Replace(" ", "");

        EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => regModel.Email)));

        var validationContext = new ValidationContext(regModel) { MemberName = nameof(regModel.Email) };
        var validationResults = new List<ValidationResult>();
        Validator.TryValidateProperty(regModel.Email, validationContext, validationResults);
        EmailFieldError = validationResults.Any() ? validationResults[0].ErrorMessage : "";
    }

    void HandlePasswordInput(ChangeEventArgs e)
    {
        // Update the variable
        string input = e.Value.ToString();
        regModel.Password = input.Replace(" ", "");

        EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => regModel.Password)));

        var validationContext = new ValidationContext(regModel) { MemberName = nameof(regModel.Password) };
        var validationResults = new List<ValidationResult>();
        Validator.TryValidateProperty(regModel.Password, validationContext, validationResults);
        PasswordFieldError = validationResults.Any() ? validationResults[0].ErrorMessage : "";

    }

    void HandleConfirmPasswordInput(ChangeEventArgs e)
    {
        // Update the variable
        string input = e.Value.ToString();
        regModel.ConfirmPassword = input.Replace(" ", "");

        EditContext_OnFieldChanged(editContext, new FieldChangedEventArgs(FieldIdentifier.Create(() => regModel.ConfirmPassword)));

        var validationContext = new ValidationContext(regModel) { MemberName = nameof(regModel.ConfirmPassword) };
        var validationResults = new List<ValidationResult>();
        Validator.TryValidateProperty(regModel.ConfirmPassword, validationContext, validationResults);
        ConfirmPasswordFieldError = validationResults.Any() ? validationResults[0].ErrorMessage : "";

    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        var editContext = sender as EditContext;
        var fieldIdentifier = e.FieldIdentifier;
        // Get the type of the model
        var modelType = editContext.Model.GetType();

        // Get the value of the field
        var fieldProperty = fieldIdentifier.Model.GetType().GetProperty(fieldIdentifier.FieldName);

        var fieldValue = fieldProperty.GetValue(fieldIdentifier.Model);

        // Get all properties of the model
        var properties = modelType.GetProperties();
        if (!string.IsNullOrWhiteSpace(fieldValue as string))
        {
            // Iterate over each property
            foreach (var property in properties)
            {
                // Get the value of the property
                var value = property.GetValue(editContext.Model);

                // Check if the value is not null or whitespace
                if (string.IsNullOrWhiteSpace(value?.ToString()) && property.Name != fieldProperty.Name)
                {
                    isRegDisabled = true;
                    StateHasChanged();
                    return;
                }
            }
            isRegDisabled = false;
            StateHasChanged();
        }
        else
        {
            isRegDisabled = true;
            StateHasChanged();
        }
    }

    #endregion

    /// <summary>
    /// Відправляє на електронну пошту користувача код для підтвердження реєстрації.
    /// </summary>
    private async Task SendCode()
    {
        ErrorPulseClass = "";

        //deattaching HandleFieldChanged
        Dispose();

        EmailDataModel emailData = new EmailDataModel()
            {
                EmailTo = regModel.Email,
            };

        var response = await Http.PostAsJsonAsync("https://localhost:7292/Email/SendVerificationCodePassword", emailData);
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            ErrorPulseClass = "pulse";
        }
        else
            errorMessage = "";
        isCodeSent = true;
        isCodeVerified = false;

    }

    private async Task VerifyCode()
    {
        ErrorPulseClass = "";

        EmailDataModel emailData = new EmailDataModel()
            {
                EmailTo = regModel.Email
            };
        ForgotPasswordModel forgotPassword = new ForgotPasswordModel()
            {
                Code = code,
            };
        forgotPassword.Email = emailData.EmailTo;
        var response = await Http.PostAsJsonAsync($"https://localhost:7292/Email/VerifyCodeEmail", forgotPassword);

        if (response.IsSuccessStatusCode)
        {
            errorMessage = "";
            isCodeVerified = true;
            isEmailConfirmed = true;
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            ErrorPulseClass = "pulse";
            isCodeVerified = false;
        }
    }

    /// <summary>
    /// Повертає до введення полів.
    /// </summary>
    private void ResetForm()
    {
        // Скидуємо стани, щоб користувач міг знову ввести дані
        isCodeSent = false;
        isCodeVerified = false;
        isRegDisabled = false;
        code = "";
    }

    /// <summary>
    /// Ініціалізує процес входу через Google.
    /// </summary>


    /// <summary>
    /// Виконує реєстрацію користувача.
    /// </summary>
    private async Task Register()
    {
        ErrorPulseClass = "";
        isRegDisabled = true;
        var registerRequest = new UserModel
            {
                Username = regModel.Username.Trim(),
                Email = regModel.Email.Trim(),
                Password = regModel.Password.Trim(),
                IsEmailConfirmed = isEmailConfirmed,
                PhotoUrl = "",
                Faculty = "",
                Name = "",
                Description = "",
                Subjects = new List<string>(),
                Social = new Dictionary<string, string>
            {
                { "instagram", "" },
                { "twitter", "" },
                { "github", "" },
                { "facebook", "" },
                { "telegram", "" }
            },
                Schedule = new Dictionary<string, List<TimeRange>>
            {
                { "Monday", new List<TimeRange>() },
                { "Tuesday", new List<TimeRange>() },
                { "Wednesday", new List<TimeRange>() },
                { "Thursday", new List<TimeRange>() },
                { "Friday", new List<TimeRange>() },
                { "Saturday", new List<TimeRange>() },
                { "Sunday", new List<TimeRange>() },
            },
                Friends = new List<MongoDB.Bson.ObjectId>(),
                OutgoingFriendRequests = new List<MongoDB.Bson.ObjectId>(),
                IncomingFriendRequests = new List<MongoDB.Bson.ObjectId>(),
                IsProfilePrivate = false,
                IsFriendsPrivate = false,
                IsProfileVerified = regModel.Email.Trim().EndsWith("knu.ua") ? true : false,
                RecentlyViewed = new List<MongoDB.Bson.ObjectId>(),
            };


        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7292/Users/register", registerRequest);
            if (response.IsSuccessStatusCode)
            {
                if (isCodeSent)
                {
                    var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.Token))
                    {

                        await TokenService.StoreToken(result.Token);
                        Navigation.NavigateTo("/UserProfile");

                    }
                    else
                    {
                        errorMessage = await response.Content.ReadAsStringAsync();
                        ErrorPulseClass = "pulse";
                    }
                }
                else
                {
                    await SendCode();
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                ErrorPulseClass = "pulse";
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Виникла помилка: {ex.Message}";
        }
    }

    public class RegistrationResponse
    {
        public string Token { get; set; }
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }

    /// <summary>
    /// Метод, я    кий викликається при ініціалізації компоненту.
    /// Перевіряє URL на наявність токену та обробляє його.
    /// </summary>

    protected override async Task OnInitializedAsync()
    {

        editContext = new EditContext(regModel);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        base.OnInitialized();

        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (!isUserAuthenticated)
        {
            var uri = new Uri(Navigation.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                await TokenService.StoreToken(token.ToString());
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
        else
        {
            errorMessage = "Failed to load user info";
        }
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= EditContext_OnFieldChanged;
    }
}