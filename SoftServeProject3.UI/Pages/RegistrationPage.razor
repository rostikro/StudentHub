@page "/registrationpage"
@inject HttpClient Http
@inject NavigationManager Navigation
<link rel="stylesheet" href="RegistrationPage.razor.css">
@inject HttpClient Http
@inject NavigationManager Navigation

@inject TokenService TokenService
@using SoftServeProject3.UI.Data
@using Microsoft.AspNetCore.WebUtilities;

<head>
    <PageTitle>Registration Page</PageTitle>


</head>


<body>
    <div class="container">
        <h1>Register</h1>
        <p>Please fill in this form to create an account.</p>
        <hr>

        <label for="username"><b>Username</b></label>
        <input type="text" placeholder="Enter Username" maxLength="20" @bind="username" required>

        <label for="email"><b>Email</b></label>
        <input type="text" placeholder="Enter Email" @bind="email" required>

        <label for="password"><b>Password</b></label>
        <input type="password" placeholder="Enter Password" @bind="password" required>

        <label for="repeatPassword"><b>Repeat Password</b></label>
        <input type="password" placeholder="Repeat Password" @bind="repeatPassword" required>
        <hr>

        <p>By creating an account you agree to our <a href="#">Terms & Privacy</a>.</p>
        <button @onclick="Register" class="registerbtn">Register</button>
    </div>

    <div class="container signin">
        <p>Already have an account? <a href="/login">Sign in</a>.</p>
    </div>
    <p>@errorMessage</p>
</body>

@code {

    private string username = "";
    private string email = "";
    private string password = "";
    private string repeatPassword = "";
    private string errorMessage = "";
    public class TimeRange
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }
    private async Task Register()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(email) ||
            string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(repeatPassword))
        {
            errorMessage = "All fields are required";
            return;
        }
        if (password != repeatPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        var registerRequest = new
        {
            Username = username,
            Email = email,
            Password = password,
            Schedule = new Dictionary<string, List<TimeRange>>
                    {
                        { "Monday", new List<TimeRange>() },
                        { "Tuesday", new List<TimeRange>() },
                        { "Wednesday", new List<TimeRange>() },
                        { "Thursday", new List<TimeRange>() },
                        { "Friday", new List<TimeRange>() },
                        { "Saturday", new List<TimeRange>() },
                        { "Sunday", new List<TimeRange>() },
                    }
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7292/Users/register", registerRequest);

            var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                await TokenService.StoreToken(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    public class RegistrationResponse
    {
        public string Token { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            await TokenService.StoreToken(token.ToString());
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
}

