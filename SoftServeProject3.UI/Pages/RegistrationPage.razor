@page "/registrationpage"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TokenService TokenService
@inject HttpClient Http
@inject NavigationManager Navigation
@using SoftServeProject3.UI.Data
@using Microsoft.AspNetCore.WebUtilities;
@using SoftServeProject3.Core.DTOs;
@using SoftServeProject3.UI.Services;

<link rel="stylesheet" href="RegistrationPage.razor.css">

<head>
    <PageTitle>Registration Page</PageTitle>
    <meta name="google-signin-client_id" content="357565124142-s9gtqe39vomlthcsqgorb32ltq65i3o8.apps.googleusercontent.com">
</head>


<body>
    <div class="container">
        <h1>Реєстрація</h1>
        <p>Будь ласка, заповніть цю форму, щоб увійти на сайт.</p>
        <hr>

        @if (!isCodeSent)
        {
            <EditForm OnValidSubmit="@Register" EditContext="@editContext">
                <DataAnnotationsValidator />
                <label for="username"><b>Ім'я користувача</b></label>
                <StyledInputText placeholder="Введіть нікнейм" maxLength="20" @bind-Value="regModel.Username" />
                <p><ValidationMessage For="@(()=>regModel.Username)" /></p>

                <label for="email"><b>Пошта</b></label>
                <StyledInputText placeholder="Введіть пошту" type="email" @bind-Value="regModel.Email" />
                <p><ValidationMessage For="@(()=>regModel.Email)" /></p>

                <label for="password"><b>Пароль</b></label>
                <StyledInputText placeholder="Введіть пароль" type="password" @bind-Value="regModel.Password" />
                <p><ValidationMessage For="@(()=>regModel.Password)" /></p>

                <label for="repeatPassword"><b>Повторіть пароль</b></label>
                <StyledInputText placeholder="Повторіть ваш пароль" type="password" @bind-Value="regModel.ConfirmPassword" />
                <p><ValidationMessage For="@(()=>regModel.ConfirmPassword)" /></p>
                <hr>
                @* error field *@
                <p id=@errorMessageId> @errorMessage</p>

                <button type="submit" disabled="@isRegDisabled" class="@registerButtonClass">Зареєструватися</button>
            </EditForm>

                //login-in google button
            <hr>
            <div @onclick="StartGoogleLogin" style="cursor: pointer; width: 240px; margin: auto;">
                <div id="my-signin2" style="pointer-events: none;"></div>
            </div>
            <hr>

            <script>
                function onSuccess(googleUser) {
                    console.log('Logged in as: ' + googleUser.getBasicProfile().getName());
                }

                function onFailure(error) {
                    console.log(error);
                }
                function renderButton() {
                    gapi.signin2.render('my-signin2', {
                        'scope': 'profile email',
                        'width': 240,
                        'height': 50,
                        'longtitle': true,
                        'theme': 'dark',
                        'onsuccess': onSuccess,
                        'onfailure': onFailure
                    });
                }
            </script>

            <script src="https://apis.google.com/js/platform.js?onload=renderButton" async defer></script>
        }
        else
        {
            <label>Поле для коду:</label>
            <input @bind="code" type="text" placeholder="Введіть ваш код" />

            <button @onclick="VerifyCode">Підтвердити</button>
            <button @onclick="SendCode">Відправити код знову</button>
            <button @onclick="ResetForm">Повернутися</button>
        }

        @if (isCodeVerified)
        {
            <p>By creating an account you agree to our <a href="#">Terms & Privacy</a>.</p>
            <button @onclick="Register" class="registerbtn-enabled">Завершити реєстрацію</button>
        }
    </div>

    <div class="container signin">
        <p>Вже зареєстровані? <a href="/login">Увійти</a></p>
    </div>
</body>

@code {


    private string errorMessage = "";

    private bool isCodeSent = false;
    private bool isCodeVerified = false;

    EditContext editContext;

    UserRegistrationModel regModel = new UserRegistrationModel();

    private bool isRegDisabled = true;

    private string code = "";
    private string errorMessageId = "error-message-nondisplay";
    private string registerButtonClass => isRegDisabled ? "registerbtn-disabled" : "registerbtn-enabled";
    private string confirmRegisterButtonClass => isCodeVerified ? "registerbtn-enabled" : "registerbtn-disabled";

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isRegDisabled = string.IsNullOrWhiteSpace(regModel.Username) ||
                   string.IsNullOrWhiteSpace(regModel.Email) ||
                   string.IsNullOrWhiteSpace(regModel.Password) ||
                   string.IsNullOrWhiteSpace(regModel.ConfirmPassword);
        StateHasChanged();
    }

    /// <summary>
    /// Відправляє на електронну пошту користувача код для підтвердження реєстрації.
    /// </summary>
    private async Task SendCode()
    {
        //deattaching HandleFieldChanged
        Dispose();

        EmailDataModel emailData = new EmailDataModel()
            {
                EmailTo = regModel.Email,
            };

        await Http.PostAsJsonAsync("https://localhost:7292/Email/SendVerificationCodePassword", emailData);
        isCodeSent = true;
        isCodeVerified = false;

    }

    private async Task VerifyCode()
    {
        EmailDataModel emailData = new EmailDataModel()
            {
                EmailTo = regModel.Email
            };
        ForgotPasswordModel forgotPassword = new ForgotPasswordModel()
            {
                Code = code,
            };
        forgotPassword.Email = emailData.EmailTo;
        var response = await Http.PostAsJsonAsync($"https://localhost:7292/Email/VerifyCodeEmail", forgotPassword);

        if (response.IsSuccessStatusCode)
        {
            errorMessage = "";
            isCodeVerified = true;
        }
        else
        {
            errorMessage = "Verification failed.";
            isCodeVerified = false;
        }
    }


    /// <summary>
    /// Повертає до введення полів.
    /// </summary>
    private void ResetForm()
    {
        // Скидуємо стани, щоб користувач міг знову ввести дані
        isCodeSent = false;
        isCodeVerified = false;
        code = "";
    }

    /// <summary>
    /// Ініціалізує процес входу через Google.
    /// </summary>
    private void StartGoogleLogin()
    {

        Navigation.NavigateTo("https://localhost:7292/Users/login/google", forceLoad: true);
    }

    /// <summary>
    /// Виконує реєстрацію користувача.
    /// </summary>
    private async Task Register()
    {

        var registerRequest = new UserModel
            {
                Username = regModel.Username,
                Email = regModel.Email,
                Password = BCrypt.Net.BCrypt.HashPassword(regModel.Password),
                IsEmailConfirmed = false,
                PhotoUrl = "",
                Faculty = "",
                Name = "",
                Description = "",
                Subjects = new List<string>(),
                Social = new Dictionary<string, string>
            {
                { "instagram", "" },
                { "twitter", "" },
                { "github", "" },
                { "facebook", "" },
                { "telegram", "" }
            },
                Schedule = new Dictionary<string, List<TimeRange>>
            {
                { "Monday", new List<TimeRange>() },
                { "Tuesday", new List<TimeRange>() },
                { "Wednesday", new List<TimeRange>() },
                { "Thursday", new List<TimeRange>() },
                { "Friday", new List<TimeRange>() },
                { "Saturday", new List<TimeRange>() },
                { "Sunday", new List<TimeRange>() },
            }
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7292/Users/register", registerRequest);
            if (response.IsSuccessStatusCode)
            {
                if (isCodeSent)
                {
                    var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.Token))
                    {

                        await TokenService.StoreToken(result.Token);
                        Navigation.NavigateTo("/"); //TODO: Змінити на профіль коли профіль буде готовим

                    }
                    else
                    {
                        errorMessage = await response.Content.ReadAsStringAsync();
                    }
                }
                else
                {
                    await SendCode();
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
            errorMessageId = !string.IsNullOrEmpty(errorMessage) ? "error-message-display" : "error-message-nondisplay";

        }
        catch (Exception ex)
        {
            errorMessage = $"Виникла помилка: {ex.Message}";
        }
    }

    public class RegistrationResponse
    {
        public string Token { get; set; }
    }


    /// <summary>
    /// Метод, я    кий викликається при ініціалізації компоненту.
    /// Перевіряє URL на наявність токену та обробляє його.
    /// </summary>

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(regModel);
        editContext.OnFieldChanged += HandleFieldChanged;
        base.OnInitialized();

        var uri = new Uri(Navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            await TokenService.StoreToken(token.ToString());
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

}

