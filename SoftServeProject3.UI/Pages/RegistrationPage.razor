@page "/registrationpage"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject TokenService TokenService
@inject HttpClient Http
@inject NavigationManager Navigation
@using SoftServeProject3.UI.Data
@using Microsoft.AspNetCore.WebUtilities;
@using SoftServeProject3.Core.DTOs;
@using SoftServeProject3.UI.Services;


@if (!isUserAuthenticated)
{
    <head>
        <PageTitle>Registration Page</PageTitle>
        <script src="https://accounts.google.com/gsi/client" async defer></script>
    </head>
    <body>
        <div class="container">
   
            @if (!isCodeSent)
            {
                <h1>Реєстрація</h1>
                <p>Будь ласка, заповніть цю форму, щоб зареєструватися на сайті.</p>
                <hr>
                <EditForm OnValidSubmit="@Register" EditContext="@editContext">
                    <DataAnnotationsValidator />
                    <label for="username"><b>Ім'я користувача</b></label>
                    <StyledInputText placeholder="Введіть нікнейм" maxLength="20" @bind-Value="regModel.Username" />
                    <p><ValidationMessage For="@(()=>regModel.Username)" /></p>

                    <label for="email"><b>Пошта</b></label>
                    <StyledInputText placeholder="Введіть пошту" type="email" @bind-Value="regModel.Email" />
                    <p><ValidationMessage For="@(()=>regModel.Email)" /></p>

                    <label for="password"><b>Пароль</b></label>
                    <StyledInputText placeholder="Введіть пароль" type="password" @bind-Value="regModel.Password" />
                    <p><ValidationMessage For="@(()=>regModel.Password)" /></p>

                    <label for="repeatPassword"><b>Повторіть пароль</b></label>
                    <StyledInputText placeholder="Повторіть ваш пароль" type="password" @bind-Value="regModel.ConfirmPassword" />
                    <p><ValidationMessage For="@(()=>regModel.ConfirmPassword)" /></p>
                    <hr>
                    @* error field *@
                    @if (!(errorMessage == ""))
                    {
                        <p id=@errorMessageId> @errorMessage</p>
                    }
                    <button type="submit" disabled="@isRegDisabled" class="@registerButtonClass">Зареєструватися</button>
                </EditForm>
                <p></p>
                <div style="display: flex; justify-content: center;">
                    <div id="g_id_onload"
                         data-client_id="357565124142-s9gtqe39vomlthcsqgorb32ltq65i3o8.apps.googleusercontent.com"
                         data-context="signin"
                         data-ux_mode="popup"
                         data-login_uri="https://localhost:7292/Users/login/google"
                         data-nonce=""
                         data-auto_prompt="false">
                    </div>

                    <div style="align-content:center">
                        <div class="g_id_signin"
                             data-type="standard"
                             data-shape="rectangular"
                             data-theme="filled_blue"
                             data-text="continue_with"
                             data-size="large"
                             data-logo_alignment="center"
                             data-width="420">
                        </div>
                    </div>
                </div>
                <hr>
                <div class="login-link">
                    <p>Вже зареєстровані? <a href="/login">Увійти</a></p>
                </div>
            }
            else
            {
                <h1>Підтвердження пошти</h1>
                <p>Будь ласка підтвердіть свою пошту.</p>
                <hr>
                <label>Поле для коду:</label>
                <input @bind="code" type="text" class="inputfld" placeholder="Введіть ваш код" />
                <div style="display: flex;">
                    <button @onclick="VerifyCode">Підтвердити</button>
                    <button @onclick="SendCode">Відправити код знову</button>
                    <button @onclick="ResetForm">Повернутися</button>
                </div>

                @if (!(errorMessage == ""))
                {
                    <p id=@errorMessageId> @errorMessage</p>
                }
            }

            @if (isCodeVerified)
            {
                <p>By creating an account you agree to our <a href="#">Terms & Privacy</a>.</p>
                <button @onclick="Register" class="registerbtn-enabled">Завершити реєстрацію</button>
            }
        </div>
    </body>
}
else
{
    Navigation.NavigateTo("/");
}



@code {


    private string errorMessage = "";

    private bool isCodeSent = false;
    private bool isCodeVerified = false;
    private bool isEmailConfirmed = false;
    private bool isUserAuthenticated;
    EditContext editContext;

    UserRegistrationModel regModel = new UserRegistrationModel();

    private bool isRegDisabled = true;

    private string code = "";
    private string errorMessageId = "error-message-nondisplay";
    private string registerButtonClass => isRegDisabled ? "registerbtn-disabled" : "registerbtn-enabled";
    private string confirmRegisterButtonClass => isCodeVerified ? "registerbtn-enabled" : "registerbtn-disabled";

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        isRegDisabled = string.IsNullOrWhiteSpace(regModel.Username) ||
                   string.IsNullOrWhiteSpace(regModel.Email) ||
                   string.IsNullOrWhiteSpace(regModel.Password) ||
                   string.IsNullOrWhiteSpace(regModel.ConfirmPassword);
        StateHasChanged();
    }

    /// <summary>
    /// Відправляє на електронну пошту користувача код для підтвердження реєстрації.
    /// </summary>
    private async Task SendCode()
    {
        //deattaching HandleFieldChanged
        Dispose();

        EmailDataModel emailData = new EmailDataModel()
        {
            EmailTo = regModel.Email,
        };

        var response = await Http.PostAsJsonAsync("https://localhost:7292/Email/SendVerificationCodePassword", emailData);
        if (!response.IsSuccessStatusCode)
            errorMessage = await response.Content.ReadAsStringAsync();
        isCodeSent = true;
        isCodeVerified = false;

    }

    private async Task VerifyCode()
    {
        EmailDataModel emailData = new EmailDataModel()
        {
            EmailTo = regModel.Email
        };
        ForgotPasswordModel forgotPassword = new ForgotPasswordModel()
        {
            Code = code,
        };
        forgotPassword.Email = emailData.EmailTo;
        var response = await Http.PostAsJsonAsync($"https://localhost:7292/Email/VerifyCodeEmail", forgotPassword);

        if (response.IsSuccessStatusCode)
        {
            errorMessage = "";
            isCodeVerified = true;
            isEmailConfirmed = true;
        }
        else
        {
            errorMessage = "Verification failed.";
            isCodeVerified = false;
        }
    }

    /// <summary>
    /// Повертає до введення полів.
    /// </summary>
    private void ResetForm()
    {
        // Скидуємо стани, щоб користувач міг знову ввести дані
        isCodeSent = false;
        isCodeVerified = false;
        code = "";
    }

    /// <summary>
    /// Ініціалізує процес входу через Google.
    /// </summary>


    /// <summary>
    /// Виконує реєстрацію користувача.
    /// </summary>
    private async Task Register()
    {
        var registerRequest = new UserModel
        {
            Username = regModel.Username,
            Email = regModel.Email,
            Password = regModel.Password,
            IsEmailConfirmed = isEmailConfirmed,
            PhotoUrl = "",
            Faculty = "",
            Name = "",
            Description = "",
            Subjects = new List<string>(),
            Social = new Dictionary<string, string>
            {
                { "instagram", "" },
                { "twitter", "" },
                { "github", "" },
                { "facebook", "" },
                { "telegram", "" }
            },
            Schedule = new Dictionary<string, List<TimeRange>>
            {
                { "Monday", new List<TimeRange>() },
                { "Tuesday", new List<TimeRange>() },
                { "Wednesday", new List<TimeRange>() },
                { "Thursday", new List<TimeRange>() },
                { "Friday", new List<TimeRange>() },
                { "Saturday", new List<TimeRange>() },
                { "Sunday", new List<TimeRange>() },
            },
            Friends = new List<MongoDB.Bson.ObjectId>(),
            OutgoingFriendRequests = new List<MongoDB.Bson.ObjectId>(),
            IncomingFriendRequests = new List<MongoDB.Bson.ObjectId>(),
            IsProfilePrivate = false,
        };

        
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7292/Users/register", registerRequest);
            if (response.IsSuccessStatusCode)
            {
                if (isCodeSent)
                {
                    var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.Token))
                    {

                        await TokenService.StoreToken(result.Token);
                        Navigation.NavigateTo("/UserProfile"); 

                    }
                    else
                    {
                        errorMessage = await response.Content.ReadAsStringAsync();
                    }
                }
                else
                {
                    await SendCode();
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
            errorMessageId = !string.IsNullOrEmpty(errorMessage) ? "error-message-display" : "error-message-nondisplay";

        }
        catch (Exception ex)
        {
            errorMessage = $"Виникла помилка: {ex.Message}";
        }
    }

    public class RegistrationResponse
    {
        public string Token { get; set; }
    }
    
    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }

    /// <summary>
    /// Метод, я    кий викликається при ініціалізації компоненту.
    /// Перевіряє URL на наявність токену та обробляє його.
    /// </summary>

    protected override async Task OnInitializedAsync()
    {

        editContext = new EditContext(regModel);
        editContext.OnFieldChanged += HandleFieldChanged;
        base.OnInitialized();

        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (!isUserAuthenticated)
        {
            var uri = new Uri(Navigation.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                await TokenService.StoreToken(token.ToString());
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
        else
        {
            errorMessage = "Failed to load user info";
        }
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}