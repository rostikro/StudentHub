@page "/UserProfileTest"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@using SoftServeProject3.UI.Services;
@using SoftServeProject3.Core.DTOs;
@inject UserProfileService UserProfileService

<h3>ProfileTest</h3>

@if (isUserAuthenticated)
{
    @if (userProfile != null)
    {
        <div class="form-group">
            <label for="photoUrl">Фото:</label>
            <input type="text" id="photoUrl" class="form-control" value="@userProfile.photoUrl" @oninput="((ChangeEventArgs e) => userProfile.photoUrl = e.Value.ToString())" />
        </div>

       

        <div class="form-group">
            <label for="faculty">Факультет:</label>
            <input type="text" id="faculty" class="form-control" value="@userProfile.faculty" @oninput="((ChangeEventArgs e) => userProfile.faculty = e.Value.ToString())" />
        </div>

         <div class="form-group">
            <label for="name">Призвіще Ім'я':</label>
            <input type="text" id="name" class="form-control" value="@userProfile.name" @oninput="((ChangeEventArgs e) => userProfile.name = e.Value.ToString())" />
        </div>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="name" class="form-control" value="@userProfile.username"/>
        </div>
        <div>
            <label for="subjectSearch">Пошук предмету:</label>
            <input type="text" id="subjectSearch" @bind="subjectSearch" @bind:event="oninput" />
        </div>
        <div class="form-group">
            <label for="subject">Предмет:</label>
            
            @if (userProfile.subjects != null && userProfile.subjects.Any())
            {
                foreach (var subject in userProfile.subjects)
                {
                    <span>@subject </span>
                }
            }
            else
            {
                <span>Немає предметів.</span>
            }
        </div>
        <div>
            <label>Оберіть предмет(и):</label>
            <select @onchange="OnSubjectsSelected" multiple>
                @if (filteredSubjects != null)
                {
                    @foreach (var subject in filteredSubjects)
                    {
                        <option @onclick="() => SelectSubject(subject)">@subject</option>
                    }
                }
            </select>
        </div>

        <div>
            <label>Обрані предмети:</label>
            @if (selectedSubjects.Any())
            {
                <ul>
                    @foreach (var subject in selectedSubjects)
                    {
                        <li>@subject <button @onclick="@(() => RemoveSubject(subject))">Видалити</button></li>
                    }
                </ul>
            }
        </div>
        <div class="social">
            <a href="https://www.instagram.com/"><div class="circle1"> </div></a>
            <a href="https://twitter.com/"><div class="circle2"> </div></a>
            <a href="https://github.com/"><div class="circle3"> </div></a>
            <a href="https://www.facebook.com/"><div class="circle4"> </div></a>
            <a href="https://t.me/KaijiAkagii"><div class="circle5"> </div></a>
            <a href="https://www.instagram.com/"><div class="circle6"> </div></a>

        </div>
        <div class="form-group">
            <label for="instagram">Instagram:</label>
            <input type="text" id="instagram" class="form-control" value="@userProfile.social["instagram"]" @oninput="@(e => UpdateSocialLink("instagram", e.Value.ToString()))" />
        </div>

        @* <div class="form-group">
            <label for="social">Соціальні мережі:</label>
            <input type="text" id="social" class="form-control" value="@userProfile.social" @oninput="((ChangeEventArgs e) => userProfile.social = e.Value.ToString())" />
        </div> *@

        <div class="form-group">
            <label for="description">Опис:</label>
            <textarea id="description" class="form-control" @oninput="((ChangeEventArgs e) => userProfile.description = e.Value.ToString())">@userProfile.description</textarea>
        </div>

        <button type="button" class="btn btn-success" @onclick="UpdateProfile">Зберегти зміни</button>
    }
    else
    {
        <p><em>Завантаження...</em></p>
    }
}
else
{
    <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
}

@code {
    private UpdateProfile userProfile;
    private bool isUserAuthenticated;
    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (isUserAuthenticated)
        {
            allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
            filteredSubjects = allSubjects;
            await LoadUserProfile();
        }
    }
    private void OnSubjectsSelected(ChangeEventArgs e)
    {
        var options = e.Value as IEnumerable<string>;
        if (options is not null)
        {
            selectedSubjects.AddRange(options.Except(selectedSubjects));
        }
    }
    private void UpdateSocialLink(string network, string url)
    {
        if (userProfile.social == null)
            userProfile.social = new Dictionary<string, string>();

        userProfile.social[network] = url;
    }
    /// <summary>
    /// Видаляє вибраний предмет зі списку обраних предметів.
    /// </summary>
    /// <param name="subject">Предмет, який потрібно видалити.</param>
    private void RemoveSubject(string subject)
    {
        selectedSubjects.Remove(subject);
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return !string.IsNullOrEmpty(token);
    }


    private string subjectSearch
    {
        get => _subjectSearch;
        set
        {
            if (_subjectSearch != value)
            {
                _subjectSearch = value;
                FilterSubjects();
            }
        }
    }

    /// <summary>
    /// Обробляє вибір користувача зі списку предметів.
    /// </summary>
    /// <param name="subject">Предмет, який вибрано зі списку.</param>
    private void SelectSubject(string subject)
    {
        if (!selectedSubjects.Contains(subject))
        {
            selectedSubjects.Add(subject);
        }
    }

    /// <summary>
    /// Фільтрує список предметів в залежності від того що ввів користувач у пошуку.
    /// </summary>
    private void FilterSubjects()
    {
        if (string.IsNullOrWhiteSpace(subjectSearch))
        {
            filteredSubjects = allSubjects;
        }
        else
        {
            filteredSubjects = allSubjects.Where(subject =>
                subject.Contains(subjectSearch, StringComparison.OrdinalIgnoreCase));
        }
    }
    private async Task LoadUserProfile()
    {
        try
        {
            // Тут припускаємо, що є метод, який може отримати email поточного користувача

            userProfile = await UserProfileService.GetProfileAsync();
            selectedSubjects = userProfile.subjects;
        }
        catch (Exception ex)
        {
            // Обробіть помилку, можливо, показавши повідомлення
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            userProfile.social = userProfile.social ?? new Dictionary<string, string>();
            userProfile.subjects = selectedSubjects;
            bool success = await UserProfileService.UpdateProfileAsync(userProfile);
            if (success)
            {
                
                // Navigation.NavigateTo("/");
            }
            else
            {
                
            }
        }
        catch (Exception ex)
        {
            
        }
    }
}

