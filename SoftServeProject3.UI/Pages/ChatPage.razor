@page "/chat"
@page "/chat/{Username}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject TokenService TokenService
@using Microsoft.AspNetCore.SignalR.Client
@using SoftServeProject3.UI.Services;
@using System.Net
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;


<h3>Чат</h3>

<div class="selected-user-name">
    @if (!string.IsNullOrEmpty(selectedUser))
    {
        <h3>@selectedUser</h3>
    }
    @* @if (typingUsers.Contains(selectedUser))
    {
        <p>@selectedUser пише...</p>
    } *@
</div>



<div class="chat-container">
    <div class="user-list">
        @foreach (var username in recentContactUsernames)
        {
            <button @onclick="() => StartChatWith(username)">@username</button>
            
        }
    </div>

    <div class="message-area" id="messageArea">
        @foreach (var message in messages)
        {
            <div class="@GetMessageClass(message)">
                @message
            </div>
        }
    </div>

    <div class="message-input-area">
        @* <textarea @bind="messageInput" @oninput="UserTypingAsync"></textarea> *@
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;
    List<string> recentContactUsernames = new();
    private List<string> typingUsers = new();
    private string selectedUser;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    [Parameter]
    public string Username { get; set; }
    string sender;
    // private Timer typingTimer;
    // private readonly int typingTimeout = 200;

    private async void StartChatWith(string username)
    {
        selectedUser = username;
        await LoadChatHistory(selectedUser);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Username))
        {
            selectedUser = Username;
            await LoadChatHistory(selectedUser);
        }
        var token = await TokenService.GetToken();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7292/chatHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, timestamp) =>
        {
            
            if (user == selectedUser)
            {
                messages.Add($"{timestamp} {user}: {message}");
                StateHasChanged();
            }
        });

        hubConnection.On<string>("UserTyping", (username) =>
        {
        if (!typingUsers.Contains(username))
        {
            typingUsers.Add(username);
            StateHasChanged();
        }
        });
        await hubConnection.StartAsync();


        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync("https://localhost:7292/Chat/recent-contacts");
        if (response.IsSuccessStatusCode)
        {
            recentContactUsernames = await response.Content.ReadFromJsonAsync<List<string>>();
            
        }
        // typingTimer = new Timer(TypingTimerElapsed, selectedUser, Timeout.Infinite, Timeout.Infinite);
    }
    private async Task LoadChatHistory(string selectedUser)
    {
        var token = await TokenService.GetToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync($"https://localhost:7292/Chat/history?user2={selectedUser}");
        if (response.IsSuccessStatusCode)
        {
            var chatHistory = await response.Content.ReadFromJsonAsync<List<Message>>();
            messages.Clear();
            messages.AddRange(chatHistory.Select(m => FormatMessage(m)));
        }
    }
    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(selectedUser) && !string.IsNullOrEmpty(messageInput))
        {
            var newMessageId = Guid.NewGuid().ToString();

            await hubConnection.SendAsync("SendMessageToUser", selectedUser, messageInput);

            
            var formattedDateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
            messages.Add($"{formattedDateTime} You: {messageInput}");

            messageInput = string.Empty;
            await hubConnection.SendAsync("MessageRead", selectedUser, newMessageId); 
        }
    }
   
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        // typingTimer?.Dispose();
    }
    private string FormatMessage(Message message)
    {
       
        var formattedDateTime = message.Timestamp.ToString("dd/MM/yyyy HH:mm");
        sender = message.SenderUsername != selectedUser ? $"You" : message.SenderUsername;
        return $"{formattedDateTime} {sender}: {message.Text}";
    }

    // private async Task UserTypingAsync(ChangeEventArgs e)
    // {
    //     await hubConnection.SendAsync("UserTyping", selectedUser);
    //     // Перезапускаємо таймер
    //     typingTimer.Change(typingTimeout, Timeout.Infinite);
    // }

    // private void TypingTimerElapsed(object state)
    // {
    //     var userWhoWasTyping = state as string; 
    //     InvokeAsync(() =>
    //     {
    //         typingUsers.Remove(userWhoWasTyping); 
    //         StateHasChanged();
    //     });
    // }

    private string GetMessageClass(string senderUsername)
    {
        return senderUsername == "You" ? "message-sent" : "message-received";
    }


}
