@page "/chat"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject TokenService TokenService
@using Microsoft.AspNetCore.SignalR.Client
@using SoftServeProject3.UI.Services;
@using System.Net
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;


<h3>Chat</h3>

<div>
    @foreach (var user in users)
    {
        <button @onclick="() => StartChatWith(user.Username)">@user.Username</button>
    }
</div>

@if (!string.IsNullOrEmpty(selectedUser))
{
    <div>
        <textarea @bind="messageInput"></textarea>
        <button @onclick="SendMessage">Send</button>
    </div>
}

@if (messages != null)
{
    foreach (var message in messages)
    {
        <p>@message</p>
    }
}

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;
    private UserListModel[] users = new UserListModel[0];
    private string selectedUser;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;


    private async void StartChatWith(string username)
    {
        selectedUser = username;
        await LoadChatHistory(selectedUser);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        
        var token = await TokenService.GetToken();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7292/chatHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, timestamp) =>
        {
            // Додавати повідомлення лише якщо воно від обраного користувача
            if (user == selectedUser)
            {
                messages.Add($"{timestamp} {user}: {message}");
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();

        
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync("https://localhost:7292/Users/list");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UserSearchResultModel>();
            users = result.Users;
            
        }
    }
    private async Task LoadChatHistory(string selectedUser)
    {
        var token = await TokenService.GetToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync($"https://localhost:7292/Users/chat/history?user2={selectedUser}");
        if (response.IsSuccessStatusCode)
        {
            var chatHistory = await response.Content.ReadFromJsonAsync<List<Message>>();
            messages.Clear();
            messages.AddRange(chatHistory.Select(m => FormatMessage(m)));
        }
    }
    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(selectedUser) && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessageToUser", selectedUser, messageInput);

            // Форматування поточного часу
            var formattedDateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
            messages.Add($"{formattedDateTime} You: {messageInput}");

            messageInput = string.Empty;
        }
    }
   
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    private string FormatMessage(Message message)
    {
        // Форматує дату і час у формат "день/місяць/рік година:хвилина"
        var formattedDateTime = message.Timestamp.ToString("dd/MM/yyyy HH:mm");
        var sender = message.SenderUsername != selectedUser ? $"You" : message.SenderUsername;
        return $"{formattedDateTime} {sender}: {message.Text}";
    }
}
