@page "/chat"
@page "/chat/{Username}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject TokenService TokenService
@inject UserProfileService UserProfileService
@using Microsoft.AspNetCore.SignalR.Client
@using SoftServeProject3.UI.Services;
@using System.Net;
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;



@if (IsLoaded)
{
    @if (isUserAuthenticated)
    {
        <SoftServeProject3.UI.wwwroot.navbar.Navbar />
        <body>
        <div class="container">
            <div class="leftSide">
                <!-- Header -->
                <div class="header">
                    <div class="userimg">
                            @if (!string.IsNullOrEmpty(myProfile.photoUrl))
                            {
                                <img draggable="false" src="@myProfile.photoUrl" alt="Фото профілю">
                            }
                            else
                            {
                                <img draggable="false" src="https://t4.ftcdn.net/jpg/01/16/06/45/240_F_116064582_KlXENacGmdt4xl8H6fQRYfSZLntLNKSX.jpg" alt="Немає фото профілю">
                            }
                    </div>
                    <ul class="nav_icons">
                        <li><ion-icon name="scan-circle-outline"></ion-icon></li>
                        <li><ion-icon name="chatbox"></ion-icon></li>
                        <li><ion-icon name="ellipsis-vertical"></ion-icon></li>
                    </ul>
                </div>
                <!-- Search Chat -->
                <div class="search_chat">
                    <div>
                        <input type="text" placeholder="Search or start new chat">
                        <ion-icon name="search-outline"></ion-icon>
                    </div>
                </div>
                <!-- CHAT LIST -->
                <div class="chatlist">
                        <div>
                            @if (recentContactUsernames.Count != 0 || selectedUser != null)
                            {
                                @foreach (var username in recentContactUsernames)
                                {

                                    <button class="block active" style="border:0px" @onclick="() => StartChatWith(username)">
@*                                         <div class="imgBox">
                                            <img src="images/img1.jpg" class="cover" alt="">
                                        </div> *@
                                        <div class="details">
                                            <div class="listHead">
                                                <h4>@username</h4>
                                                <p class="time">час</p>
                                            </div>
                                            <div class="message_p">
                                                <p>останнє повідомлення</p>
                                            </div>
                                        </div>
                                    </button>

                                }

                            }
                            else
                            {
                                <p>
                                    У вас немає недавніх чатів. Знайдіть користувача, з яким би ви хотіли поспілкуватися тут:
                                    <NavLink href="/UserSearch">Пошук</NavLink>
                                </p>
                            }
                        </div>


                        <div class="block active">
                        <div class="imgBox">
                                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTy81HQiZbMfn2-yOG3kYfvgxY3kFTtM5iTlq4kPRq6kg&s" class="cover" alt="">
                        </div>
                        <div class="details">
                            <div class="listHead">
                                <h4>Vasil(test)</h4>
                                <p class="time">12:34</p>
                            </div>
                            <div class="message_p">
                                <p>останнє повідомлення (test)</p>
                                <b>1</b>
                            </div>
                        </div>
                    </div>

                        <div class="@* block unread *@block active">
                        <div class="imgBox">
                                <img src="https://big.informator.ua/wp-content/uploads/2022/11/znykla-1.jpg" class="cover" alt="">
                        </div>
                        <div class="details">
                            <div class="listHead">
                                <h4>Olivia(test)</h4>
                                <p class="time">Yesterday</p>
                            </div>
                            <div class="message_p">
                                <p>останнє повідомлення (test)</p>
                                <b>2</b>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="rightSide">
                <div class="header">
                    <div class="imgText">
                        <div class="userimg">
                            <img src="images/img1.jpg" alt="" class="cover">
                        </div>
                            <div>
                                @if (!string.IsNullOrEmpty(selectedUser))
                                {
                                    <h5>@selectedUser</h5>
                                    @if (typingUsers.Contains(selectedUser))
                                    {
                                        <p class="typing-indicator">@selectedUser пише...</p>
                                    }

                                } <span>online</span>
                            </div>
                    </div>
                    <ul class="nav_icons">
                        <li><ion-icon name="search-outline"></ion-icon></li>
                        <li><ion-icon name="ellipsis-vertical"></ion-icon></li>
                    </ul>
                </div>

                <!-- CHAT-BOX -->
                <div class="chatbox">
                        <div class="message-area" id="messageArea">
                            @foreach (var message in messages)
                            {
                                <div class="@GetMessageClass(message)">
                                    @FormatMessage(message)
                                </div>
                            }
                        </div>

                </div>

                <!-- CHAT INPUT -->
                    <div class="chat_input">
                        @if (errorMessage != null)
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                        @if (selectedUser != null)
                        {
                            <ion-icon name="happy-outline"></ion-icon>
                            <input type="text" @bind="messageInput" @oninput="OnInput" @onkeydown="HandleKeyDown" placeholder="Введіть повідомлення">
@*                             ТЕПЕР непотрібна кнопка
                            <button @onclick="SendMessage">
                                <i class="material-icons nav__icon">send</i>
                                <span class="nav__text"></span>
                            </button> *@
                            <ion-icon name="mic"></ion-icon>
                        }
                    </div>
            </div>


        </div>


        <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
        <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>

@*         <div class="selected-user-name">
            @if (!string.IsNullOrEmpty(selectedUser))
            {
                <h3>@selectedUser</h3>
                @if (typingUsers.Contains(selectedUser))
                {
                    <p class="typing-indicator">@selectedUser пише...</p>
                }

            }
        </div>   *@





@*             <div class="user-list">
                @if (recentContactUsernames.Count != 0 || selectedUser != null)
                {
                    @foreach (var username in recentContactUsernames)
                    {
                        <button @onclick="() => StartChatWith(username)">@username</button>

                    }

                }
                else
                {
                    <p>
                        У вас немає недавніх чатів. Знайдіть користувача, з яким би ви хотіли поспілкуватися тут:
                        <NavLink href="/UserSearch">Пошук</NavLink>
                    </p>
                }
            </div> *@



        </body>
    }
    else
    {

        <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
        <span class="loader"></span>
    }
}


@code {
    UpdateProfile myProfile;
    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    private string messageInput;
    List<string> recentContactUsernames = new();
    private List<string> typingUsers = new();
    private string selectedUser;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    [Parameter]
    public string Username { get; set; }
    string sender;
    private Dictionary<string, Timer> typingTimers = new Dictionary<string, Timer>();
    private readonly int typingTimeout = 5000;
    string errorMessage;
    const int MESSAGE_LIMIT = 500;
    const int WINDOW_OUTPUT_LIMIT = 83;
    bool IsLoaded = false;
    bool isUserAuthenticated;

    private async void StartChatWith(string username)
    {
        selectedUser = username;
        await LoadChatHistory(selectedUser);
        StateHasChanged();
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);

    }


    protected override async Task OnInitializedAsync()
    {
        IsLoaded = false;
        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (isUserAuthenticated)
        {
            if (!string.IsNullOrWhiteSpace(Username))
            {
                selectedUser = Username;
                await LoadChatHistory(selectedUser);
            }
            var token = await TokenService.GetToken();
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7292/chatHub"), options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .Build();

            hubConnection.On<string, string, string>("ReceiveMessage", (user, message, timestamp) =>
            {

                if (user == selectedUser)
                {
                    var newMessage = new Message
                        {
                            SenderUsername = user,
                            Text = message,
                            Timestamp = DateTime.Parse(timestamp)
                        };

                    messages.Add(newMessage);
                    StateHasChanged();
                }
            });

            hubConnection.On<string>("UserTyping", (username) =>
            {
                if (!typingUsers.Contains(username))
                {
                    typingUsers.Add(username);
                }

                if (typingTimers.ContainsKey(username))
                {
                    typingTimers[username].Change(typingTimeout, Timeout.Infinite);
                }
                else
                {
                    var timer = new Timer(_ => TypingTimerElapsed(username), null, typingTimeout, Timeout.Infinite);
                    typingTimers.Add(username, timer);
                }

                StateHasChanged();
            });
            await hubConnection.StartAsync();


            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);





            var responseProfile = await Http.GetAsync("https://localhost:7292/Users/profile");
            responseProfile.EnsureSuccessStatusCode();

            myProfile = await responseProfile.Content.ReadFromJsonAsync<UpdateProfile>();

            var response = await Http.GetAsync("https://localhost:7292/Chat/recent-contacts");
            if (response.IsSuccessStatusCode)
            {
                recentContactUsernames = await response.Content.ReadFromJsonAsync<List<string>>();

            }
            
        }
        else
        {
            errorMessage = "Увійдіть для того щоб перейти на цю сторінку";
            

        }
        IsLoaded = true;
        
        // typingTimer = new Timer(TypingTimerElapsed, selectedUser, Timeout.Infinite, Timeout.Infinite);
    }
    private async Task LoadChatHistory(string selectedUser)
    {
        var token = await TokenService.GetToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync($"https://localhost:7292/Chat/history?user2={selectedUser}");
        if (response.IsSuccessStatusCode)
        {
            var chatHistory = await response.Content.ReadFromJsonAsync<List<Message>>();
            messages.Clear();
            messages.AddRange(chatHistory);
        }
    }
    private async Task SendMessage()
    {
        // if (messageInput.Length > MESSAGE_LIMIT)
        // {
        //     errorMessage = $"Кількість символів більша за {MESSAGE_LIMIT}";
        //     return;
        // }

        if (!string.IsNullOrEmpty(selectedUser) && !string.IsNullOrEmpty(messageInput))
        {
            var newMessageId = Guid.NewGuid().ToString();



            await hubConnection.SendAsync("SendMessageToUser", selectedUser, messageInput);

            
            var formattedDateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
            var newMessage = new Message
                {
                    SenderUsername = myProfile.username, 
                    Text = messageInput,
                    Timestamp = DateTime.Now
                };
            messages.Add(newMessage);

            messageInput = string.Empty;
            await hubConnection.SendAsync("MessageRead", selectedUser, newMessageId); 
        }
    }
   
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        foreach (var timer in typingTimers.Values)
        {
            timer.Dispose();
        }
    }
    private string FormatMessage(Message message)
    {
        var formattedDateTime = message.Timestamp.ToString("dd/MM/yyyy HH:mm");
        var sender = message.SenderUsername != selectedUser ? "You" : message.SenderUsername;
        return $"{formattedDateTime} {sender}: {message.Text}";
    }

    private void TypingTimerElapsed(string username)
    {
        InvokeAsync(() =>
        {
            typingUsers.Remove(username);
            if (typingTimers.TryGetValue(username, out var timer))
            {
                timer.Dispose();
                typingTimers.Remove(username);
            }
            StateHasChanged();
        });
    }

    private string GetMessageClass(Message message)
    {
        return message.SenderUsername == myProfile.username ? "message-sent" : "message-received";
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        messageInput = e.Value.ToString();

        messageInput = messageInput.Replace("\n", "");

        
        for (int i = WINDOW_OUTPUT_LIMIT; i < messageInput.Length; i += WINDOW_OUTPUT_LIMIT)
        {
            messageInput = messageInput.Insert(i, "\n");
            i++; 
        }

        await hubConnection.SendAsync("UserTyping", selectedUser);
    }

    // відправка повідомлення через ентер у інпуті
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.CtrlKey && !e.AltKey && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

}
