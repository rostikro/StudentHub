@page "/UserSearch"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;
@using System.Net.Http.Json;




@if (isLoaded)
{
    @if (isUserAuthenticated)
    {
        <body>

            <div class="wrapper">
                <SoftServeProject3.UI.wwwroot.navbar.Navbar />
            </div>


            <div>
                <div class="right-side">
                    <div>
                        <label>Оберіть дні:</label>
                        <div>
                            @foreach (var day in daysOfWeek)
                            {
                                <div style="display: inline-block; margin-right: 10px;">
                                    <input type="checkbox" @bind="@selectedDays[day]" />
                                    <label>@day</label>
                                </div>
                            }
                        </div>
                    </div>

                    <label for="startTime">Час початку:</label>
                    <input type="time" id="startTime" @bind="startTimeInput" />

                    <label for="endTime">Час завершення:</label>
                    <input type="time" id="endTime" @bind="endTimeInput" />

                    <div class="form-group">
                        <label for="faculty">Факультет:</label>
                        <select id="faculty" class="form-control" @onchange="SelectFaculty">

                            @if (allFaculties != null)
                            {
                                @foreach (var faculty in allFaculties)
                                {
                                    <option value="@faculty">@faculty</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                @if (errorMessage != null)
                {
                    <p class="text-danger">@errorMessage</p>
                }
                <div class="left-side">
                    <div>
                        <label for="usernameSearch">Пошук користувача за нікнеймом:</label>
                        <input type="text" id="usernameSearch" @bind="usernameSearch" />
                        <button @onclick="SearchByUsername">Пошук</button>
                    </div>

                    <div>
                        <label for="subjectSearch">Пошук предмету:</label>
                        <input type="text" id="subjectSearch" @bind="subjectSearch" @bind:event="oninput" />
                    </div>

                    <div class="searchSubject">

                        <label>Оберіть предмет(и):</label>
                        <select @onchange="OnSubjectsSelected" multiple>
                            @if (filteredSubjects != null)
                            {
                                @foreach (var subject in filteredSubjects)
                                {
                                    <option selected=@selectedSubjects.Contains(subject)>@subject</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="selected-subjects-container">
                        @if (selectedSubjects.Any())
                        {
                            <div class="subject-items">
                                @foreach (var subject in selectedSubjects)
                                {
                                    <div class="subject-item">
                                        <span>@subject</span>
                                        <button @onclick="@(() => RemoveSubject(subject))">Видалити</button>
                                    </div>
                                }
                            </div>
                        }
                    </div>


                </div>

                <div class="buttons">
                    <button @onclick="ApplyFilters">Фільтрувати</button>
                    <button @onclick="ResetFilters">Скинути фільтри</button>
                </div>
            </div>

            <table class="user-table">
                <caption>Список студентів</caption>
                <thead>
                    <tr>
                        <th>Ім'я користувача</th>
                        <th>Предмети</th>
                        <th>Факультет</th>
                    </tr>
                </thead>
                <tbody>
                    @if (users != null && users.Length > 0)
                    {
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    <a href="UserProfile/@user.Username">@user.Username</a>
                                </td>
                                <td>
                                    @if (user.Subjects != null && user.Subjects.Any())
                                    {
                                        @foreach (var subject in user.Subjects)
                                        {
                                            if (subject != user.Subjects[^1])
                                            {
                                                <span>@subject, </span>
                                            }
                                            else
                                            {
                                                <span>@subject</span>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <span>Немає предметів</span>
                                    }
                                </td>
                                <td>@user.Faculty</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3">Користувачів не знайдено</td>
                        </tr>
                    }


                </tbody>
            </table>
        </body>
    }

    else
    {
        <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
        <span class="loader"></span>
    }
}
@code {
    const int MAX_SUBJECTS = 3;

    private UserListModel[] users = new UserListModel[0];
    private string usernameSearch = string.Empty;
    private TimeOnly? startTimeInput;
    private TimeOnly? endTimeInput;
    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();
    private bool isUserAuthenticated;
    private string errorMessage;
    private string selectedFaculty = "Пусто";
    private List<string> allFaculties;
    private string[] daysOfWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private Dictionary<string, bool> selectedDays = new Dictionary<string, bool>
    {
        {"Monday", false},
        {"Tuesday", false},
        {"Wednesday", false},
        {"Thursday", false},
        {"Friday", false},
        {"Saturday", false},
        {"Sunday", false}
    };
    bool isLoaded;
    private string subjectSearch
    {
        get => _subjectSearch;
        set
        {
            if (_subjectSearch != value)
            {
                _subjectSearch = value;
                FilterSubjects();
            }
        }
    }
    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }
    /// <summary>
    /// Обробляє вибір користувача зі списку предметів.
    /// </summary>
    /// <param name="subject">Предмет, який вибрано зі списку.</param>
    private void SelectSubject(string subject)
    {
        if (!selectedSubjects.Contains(subject))
        {
            selectedSubjects.Add(subject);
        }
    }

    private async Task SearchByUsername()
    {
        ResetFilters();
        var queryParams = new Dictionary<string, string>();
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(usernameSearch))
        {
            errorMessage = "Будь ласка, введіть нікнейм користувача для пошуку.";
            return;
        }
        if (!string.IsNullOrWhiteSpace(usernameSearch))
        {
            var url = $"https://localhost:7292/Users/search?username={Uri.EscapeDataString(usernameSearch)}";
            var response = await Http.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<UserListModel[]>();
            }
            else
            {
                users = Array.Empty<UserListModel>();
                errorMessage = "Користувача не знайдено.";
            }
        }
        usernameSearch = string.Empty;
    }

    private void SelectFaculty(ChangeEventArgs e)
    {
        selectedFaculty = e.Value?.ToString();
    }
    /// <summary>
    /// Фільтрує список предметів в залежності від того що ввів користувач у пошуку.
    /// </summary>
    private void FilterSubjects()
    {
        if (string.IsNullOrWhiteSpace(subjectSearch))
        {
            filteredSubjects = allSubjects;
        }
        else
        {
            filteredSubjects = allSubjects.Where(subject =>
                subject.Contains(subjectSearch, StringComparison.OrdinalIgnoreCase));
        }
    }

    /// <summary>
    /// Ініціалізується при завантаженні сторінки, завантажуючи дані про предмети та користувачів.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        isLoaded = false;
        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (isUserAuthenticated)
        {
            var token = await TokenService.GetToken();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
            allFaculties = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/faculties");
            filteredSubjects = allSubjects;
            users = await Http.GetFromJsonAsync<UserListModel[]>("https://localhost:7292/Users/list");
        }
        else
        {
            errorMessage = "Failed to load user info";
        }
        isLoaded = true;
    }

    /// <summary>
    /// Обробник події, який викликається, коли користувач змінює вибір предметів у випадаючому списку.
    /// Додає вибрані предмети до списку обраних, видаляючи дублікати.
    /// </summary>
    /// <param name="e">Параметри події, що містять значення, вибрані користувачем.</param>
    private void OnSubjectsSelected(ChangeEventArgs e)
    {
        var options = e.Value as IEnumerable<string>;
        if (options is not null)
        {
            var newSelections = options.Except(selectedSubjects);
            var availableSlots = MAX_SUBJECTS - selectedSubjects.Count;
            if (newSelections.Count() <= availableSlots)
            {
                selectedSubjects.AddRange(newSelections);
            }
            else
            {

                selectedSubjects.AddRange(newSelections.Take(availableSlots));
                errorMessage = $"Можна обрати максимум {MAX_SUBJECTS} предметів";
            }
        }
    }

    /// <summary>
    /// Видаляє вибраний предмет зі списку обраних предметів.
    /// </summary>
    /// <param name="subject">Предмет, який потрібно видалити.</param>
    private void RemoveSubject(string subject)
    {
        selectedSubjects.Remove(subject);
    }

    /// <summary>
    /// Застосовує встановлені фільтри до списку користувачів.
    /// </summary>
    private async Task ApplyFilters()
    {
        var queryParameters = new List<string>();
        var defaultStartTime = new TimeOnly(0, 0);
        var defaultEndTime = new TimeOnly(23, 59);
        try
        {
            if (startTimeInput.HasValue && endTimeInput.HasValue)
            {
                if (startTimeInput.Value >= endTimeInput.Value)
                {
                    throw new ArgumentException("Час початку повинен бути меншим за час завершення.");
                }

                TimeSpan startTime = startTimeInput.Value.ToTimeSpan();
                TimeSpan endTime = endTimeInput.Value.ToTimeSpan();
                queryParameters.Add($"startTime={startTime:hh\\:mm\\:ss}");
                queryParameters.Add($"endTime={endTime:hh\\:mm\\:ss}");
            }
            else
            {
                TimeSpan startTime = defaultStartTime.ToTimeSpan();
                TimeSpan endTime = defaultEndTime.ToTimeSpan();
                queryParameters.Add($"startTime={startTime:hh\\:mm\\:ss}");
                queryParameters.Add($"endTime={endTime:hh\\:mm\\:ss}");
            }
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            users = Array.Empty<UserListModel>();
        }

        if (selectedSubjects.Any())
        {
            queryParameters.AddRange(selectedSubjects.Select(subject => $"subjects={Uri.EscapeDataString(subject)}"));
        }
        queryParameters.Add($"faculty={Uri.EscapeDataString(selectedFaculty)}");
        foreach (var day in selectedDays)
        {
            if (day.Value)
            {
                queryParameters.Add($"days={day.Key}");
            }
        }
        if (startTimeInput.HasValue && endTimeInput.HasValue)
        {
            queryParameters.Add($"startTime={startTimeInput.Value:hh\\:mm}");
            queryParameters.Add($"endTime={endTimeInput.Value:hh\\:mm}");
        }
        var queryString = queryParameters.Any() ? $"?{string.Join("&", queryParameters)}" : "";
        var url = $"https://localhost:7292/Users/search{queryString}";

        var response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            users = await response.Content.ReadFromJsonAsync<UserListModel[]>();
        }
        else
        {
            users = Array.Empty<UserListModel>();
        }
    }

    /// <summary>
    /// Скидає всі встановлені фільтри та віднавлює початковий список користувачів.
    /// </summary>
    private async Task ResetFilters()
    {
        startTimeInput = null;
        endTimeInput = null;
        selectedSubjects.Clear();
        selectedFaculty = "Пусто";
        subjectSearch = string.Empty;
        filteredSubjects = allSubjects;
        foreach (var day in daysOfWeek)
        {
            selectedDays[day] = false;
        }
        StateHasChanged();
        await ApplyFilters();
    }
}
