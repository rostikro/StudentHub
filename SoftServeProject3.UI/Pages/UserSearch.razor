@page "/UserSearch"
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject UserProfileService UserProfileService
@using SoftServeProject3.UI.Services;
@using System.Globalization
@using Newtonsoft.Json;
@using SoftServeProject3.Core.DTOs;
@using System.Net.Http.Headers;
@using System.Net.Http.Json;
@using System.Diagnostics;
@using System.Timers;


@if (isLoaded)
{
    @if (isUserAuthenticated)
    {
        <body>

            <div class="wrapper">
                <SoftServeProject3.UI.wwwroot.navbar.Navbar />
            </div>


            <div class="time-filter">
                <div>
                    <div>
                        <div>
                            @foreach (var day in daysOfWeek)
                            {
                                <div style="display: inline-block; margin-right: 10px;">
                                    <input type="checkbox" @bind="@selectedDays[day]" />
                                    <label>@day</label>
                                </div>
                            }
                        </div>
                    </div>

                    <label for="startTime">Час початку:</label>
                    <input type="time" id="startTime" @bind="startTimeInput" />

                    <label for="endTime">Час завершення:</label>
                    <input type="time" id="endTime" @bind="endTimeInput" />
                </div>


                <div class="filter-btns">
                    <button @onclick="ApplyFilters">Фільтрувати</button>
                    <button @onclick="ResetFilters">Скинути фільтр</button>
                </div>
            </div>

            @* @if (errorMessage != null)
            {
                <p class="text-danger">@errorMessage</p>
            } *@
            <table class="user-table">
                <caption>Список студентів</caption>
                <thead>
                    <tr>
                        <th>
                            Ім'я користувача
                            @if (currentPage == 1)
                            {
                                @if (!showSearchUsernameInput)
                                {
                                    <button class="search-btn" @onclick="ToggleSearchUsernameInput">🔍</button>
                                }
                                @if (showSearchUsernameInput)
                                {
                                    <StyledSearchInput placeholder="Пошук" type="text" id="usernameSearch" @bind-Value="usernameSearch"
                                    @oninput="EventCallback.Factory.Create(this, (ChangeEventArgs e) => HandleUsernameInput(e))" />
                                    <button @onclick="ToggleSearchUsernameInput" class="closebtn">X</button>
                                }
                            }

                        </th>
                        <th>
                            Предмети
                            @{
                                if (showSearchSubjectsInput)
                                {
                                    <text>(Максимум 3)</text>
                                }
                            }
                            @if (currentPage == 1)
                            {
                                @if (!showSearchSubjectsInput)
                                {
                                    <button class="search-btn" @onclick="ToggleSearchSubjectsInput">🔍</button>
                                }
                                else
                                {
                                    <div class="searchSubject">
                                        <input type="text" id="subjectSearch" @bind="subjectSearch" @bind:event="oninput" />
                                        <button @onclick="ToggleSearchSubjectsInput" class="closebtn">X</button>
                                    </div>
                                    <div class="searchSubject">
                                        <select @onchange="OnSubjectsSelected" multiple>
                                            @if (filteredSubjects != null)
                                            {
                                                @foreach (var subject in filteredSubjects)
                                                {
                                                    <option selected=@selectedSubjects.Contains(subject)>@subject</option>
                                                }
                                            }
                                        </select>
                                        <div class="subject-items">

                                            @if (selectedSubjects.Any())
                                            {
                                                @foreach (var subject in selectedSubjects)
                                                {
                                                    <div class="subject-item">
                                                        <span>@subject</span>
                                                        <button @onclick="@(() => RemoveSubject(subject))">х</button>
                                                    </div>
                                                }
                                            }
                                        </div>

                                    </div>


                                }

                            }

                        </th>
                        <th>
                            Факультет
                            @if (currentPage == 1)
                            {
                                @if (!showSearchFacultyInput)
                                {
                                    <button class="search-btn" @onclick="ToggleSearchFacultyInput">🔍</button>
                                }
                                else
                                {
                                    <div style="display:flex; justify-content: center;">
                                        <select id="faculty" class="form-control" @onchange="SelectFaculty">

                                            @if (allFaculties != null)
                                            {
                                                @foreach (var faculty in allFaculties)
                                                {
                                                    <option value="@faculty">@faculty</option>
                                                }
                                            }
                                        </select>
                                        <button @onclick="ToggleSearchFacultyInput" class="closebtn">X</button>
                                    </div>
                                }
                            }
                        </th>
                    </tr>
                </thead>
                <tbody class="table-content">
                    @if (searchStarted)
                    {
                        @if (users != null && users.Length > 0)
                        {
                            @foreach (var user in users)
                            {
                                <tr @onclick="() => GoToUserProfile(user.Username)">
                                    <td class="table-content">
                                        <b>@user.Username</b>
                                    </td>
                                    <td>
                                        @if (user.Subjects != null && user.Subjects.Any())
                                        {
                                            @foreach (var subject in user.Subjects)
                                            {
                                                if (subject != user.Subjects[^1])
                                                {
                                                    <span>@subject, </span>
                                                }
                                                else
                                                {
                                                    <span>@subject</span>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <span>Не вказані.</span>
                                        }
                                    </td>
                                    <td>
                                        @(!string.IsNullOrEmpty(user.Faculty) ? user.Faculty : "Не вказаний.")
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            totalPages = 1;
                            <tr id="no-users">
                                <td colspan="3"><b>Користувачів не знайдено</b></td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr id="no-users">
                            <td colspan="3"><b>Почніть пошук користувача...</b></td>
                        </tr>
                    }


                </tbody>
            </table>
            @if (searchStarted)
            {
                @if (totalPages != 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            @if (currentPage != 1)
                            {
                                <чli class="page-item">
                                    <button class="page-link" @onclick="PreviousPage">Назад</button>
                                </чli>
                            }

                            @for (int i = 1; i <= totalPages; i++)
                            {
                                int localPage = i;
                                <li class="page-item @((localPage == currentPage) ? "active" : "passive")">
                                    <button class="page-link" @onclick="@(() => GoToPage(localPage))">@localPage</button>
                                </li>
                            }
                            @if (currentPage != totalPages)
                            {
                                <li class="page-item">
                                    <button class="page-link" @onclick="NextPage">Вперед</button>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
        </body>
    }

    else
    {
        <p>Будь ласка, <a href="/login">ввійдіть</a> для доступу до цієї сторінки.</p>
        <span class="loader"></span>
    }
}
@code {
    const int MAX_SUBJECTS = 3;
    private int currentPage = 1;
    private int totalPages;
    private UserListModel[] users = new UserListModel[0];
    private string usernameSearch = string.Empty;
    private Timer myTimer;

    private bool searchStarted = false;
    private bool showSearchUsernameInput;
    private bool showSearchFacultyInput;
    private bool showSearchSubjectsInput;

    private TimeOnly? startTimeInput;
    private TimeOnly? endTimeInput;
    private List<string> selectedSubjects = new List<string>();
    private List<string> allSubjects = new List<string>();
    private string _subjectSearch = string.Empty;
    private IEnumerable<string> filteredSubjects = Enumerable.Empty<string>();
    private bool isUserAuthenticated;
    private string errorMessage;
    private string selectedFaculty = "Немає";
    private List<string> allFaculties;
    private string[] daysOfWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private Dictionary<string, bool> selectedDays = new Dictionary<string, bool>
    {
        {"Monday", false},
        {"Tuesday", false},
        {"Wednesday", false},
        {"Thursday", false},
        {"Friday", false},
        {"Saturday", false},
        {"Sunday", false}
    };
    bool isLoaded;
    private string subjectSearch
    {
        get => _subjectSearch;
        set
        {
            if (_subjectSearch != value)
            {
                _subjectSearch = value;
                FilterSubjects();
            }
        }
    }

    private void GoToUserProfile(string username)
    {
        Navigation.NavigateTo($"UserProfile/{username}");
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        var token = await TokenService.GetToken();
        return TokenService.IsTokenValid(token);
    }
    /// <summary>
    /// Обробляє вибір користувача зі списку предметів.
    /// </summary>
    /// <param name="subject">Предмет, який вибрано зі списку.</param>
    private void SelectSubject(string subject)
    {
        if (!selectedSubjects.Contains(subject))
        {
            selectedSubjects.Add(subject);
        }
    }

    private async void ToggleSearchUsernameInput()
    {
        showSearchUsernameInput = !showSearchUsernameInput;
        if (!showSearchUsernameInput)
        {
            usernameSearch = string.Empty;
            StartApplyTimer();
        }
    }

    private async void ToggleSearchFacultyInput()
    {
        showSearchFacultyInput = !showSearchFacultyInput;
        if (!showSearchFacultyInput)
        {
            selectedFaculty = "Немає";
            StartApplyTimer();
        }
    }

    private async void ToggleSearchSubjectsInput()
    {
        showSearchSubjectsInput = !showSearchSubjectsInput;
        if (!showSearchFacultyInput)
        {
            selectedSubjects.Clear();
            subjectSearch = string.Empty;
            StartApplyTimer();
        }
    }

    private void StartApplyTimer()
    {
        if (myTimer != null)
        {
            myTimer.Stop();
            myTimer.Dispose();
        }

        myTimer = new Timer(200);
        myTimer.Elapsed += async (sender, e) => await OnTimedEvent(sender, e);
        myTimer.Start();
    }

    private async Task OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        myTimer.Stop();
        myTimer.Dispose();
        myTimer = null;

        await ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }


    private void HandleUsernameInput(ChangeEventArgs e)
    {
        usernameSearch = e.Value.ToString().Replace(" ", "");
        StartApplyTimer();
    }

    private void SelectFaculty(ChangeEventArgs e)
    {
        selectedFaculty = e.Value?.ToString();
        StartApplyTimer();
    }
    /// <summary>
    /// Фільтрує список предметів в залежності від того що ввів користувач у пошуку.
    /// </summary>
    private void FilterSubjects()
    {
        if (string.IsNullOrWhiteSpace(subjectSearch))
        {
            filteredSubjects = allSubjects;
        }
        else
        {
            filteredSubjects = allSubjects.Where(subject =>
                subject.Contains(subjectSearch, StringComparison.OrdinalIgnoreCase));
        }
    }

    /// <summary>
    /// Ініціалізується при завантаженні сторінки, завантажуючи дані про предмети та користувачів.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        isLoaded = false;
        isUserAuthenticated = await IsUserAuthenticatedAsync();
        if (isUserAuthenticated)
        {
            var token = await TokenService.GetToken();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            allSubjects = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/subjects");
            allFaculties = await Http.GetFromJsonAsync<List<string>>("https://localhost:7292/Users/faculties");
            filteredSubjects = allSubjects;
        }
        else
        {
            errorMessage = "Failed to load user info";
        }
        isLoaded = true;
    }

    /// <summary>
    /// Обробник події, який викликається, коли користувач змінює вибір предметів у випадаючому списку.
    /// Додає вибрані предмети до списку обраних, видаляючи дублікати.
    /// </summary>
    /// <param name="e">Параметри події, що містять значення, вибрані користувачем.</param>
    private void OnSubjectsSelected(ChangeEventArgs e)
    {
        var options = e.Value as IEnumerable<string>;
        if (options is not null)
        {
            var newSelections = options.Except(selectedSubjects);
            var availableSlots = MAX_SUBJECTS - selectedSubjects.Count;
            if (newSelections.Count() <= availableSlots)
            {
                selectedSubjects.AddRange(newSelections);
            }
            else
            {

                selectedSubjects.AddRange(newSelections.Take(availableSlots));
            }
            StartApplyTimer();
        }
    }

    /// <summary>
    /// Видаляє вибраний предмет зі списку обраних предметів.
    /// </summary>
    /// <param name="subject">Предмет, який потрібно видалити.</param>
    private async void RemoveSubject(string subject)
    {
        selectedSubjects.Remove(subject);
        StartApplyTimer();
    }

    /// <summary>
    /// Застосовує встановлені фільтри до списку користувачів.
    /// </summary>
    private async Task ApplyFilters()
    {
        if (string.IsNullOrEmpty(usernameSearch) && selectedFaculty == "Немає" && !selectedSubjects.Any())
            searchStarted = false;
        else
            searchStarted = true;
        TimeSpan startTime;
        TimeSpan endTime;
        var queryParameters = new List<string>();
        var defaultStartTime = new TimeOnly(0, 0);
        var defaultEndTime = new TimeOnly(23, 59);
        try
        {
            if (startTimeInput.HasValue && endTimeInput.HasValue)
            {
                if (startTimeInput.Value >= endTimeInput.Value)
                {
                    throw new ArgumentException("Час початку повинен бути меншим за час завершення.");
                }

                startTime = startTimeInput.Value.ToTimeSpan();
                endTime = endTimeInput.Value.ToTimeSpan();
                queryParameters.Add($"startTime={startTime:hh\\:mm\\:ss}");
                queryParameters.Add($"endTime={endTime:hh\\:mm\\:ss}");
            }
            else if (selectedDays.Values.Any(value => value == true))
            {
                startTime = defaultStartTime.ToTimeSpan();
                endTime = defaultEndTime.ToTimeSpan();
                queryParameters.Add($"startTime={startTime:hh\\:mm\\:ss}");
                queryParameters.Add($"endTime={endTime:hh\\:mm\\:ss}");
            }

        }
        catch (ArgumentException ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            users = Array.Empty<UserListModel>();
        }

        if (selectedSubjects.Any())
        {
            queryParameters.AddRange(selectedSubjects.Select(subject => $"subjects={Uri.EscapeDataString(subject)}"));
        }
        queryParameters.Add($"faculty={Uri.EscapeDataString(selectedFaculty)}");
        foreach (var day in selectedDays)
        {
            if (day.Value)
            {
                queryParameters.Add($"days={day.Key}");
            }
        }
        if (startTimeInput.HasValue && endTimeInput.HasValue)
        {
            queryParameters.Add($"startTime={startTimeInput.Value:hh\\:mm}");
            queryParameters.Add($"endTime={endTimeInput.Value:hh\\:mm}");
        }
        if (string.IsNullOrWhiteSpace(usernameSearch))
            usernameSearch = string.Empty;
        else
            queryParameters.Add($"username={Uri.EscapeDataString(usernameSearch)}");

        var queryString = queryParameters.Any() ? $"?{string.Join("&", queryParameters)}" : "";
        var url = $"https://localhost:7292/Users/search{queryString}";

        var response = await Http.GetAsync($"https://localhost:7292/Users/search{queryString}&page={currentPage}&pageSize=5");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UserSearchResultModel>();
            users = result.Users;
            totalPages = (int)Math.Ceiling((double)result.TotalCount / 5);
        }
        else
        {
            users = Array.Empty<UserListModel>();
        }
    }
    private async Task GoToPage(int page)
    {
        Console.WriteLine($"currentPage: {currentPage}, totalPages: {totalPages}, requestedPage: {page}");
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await ApplyFilters();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await ApplyFilters();
            StateHasChanged();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await ApplyFilters();
            StateHasChanged();
        }
    }
    /// <summary>
    /// Скидає всі встановлені фільтри та віднавлює початковий список користувачів.
    /// </summary>
    private async Task ResetFilters()
    {
        searchStarted = false;
        startTimeInput = null;
        endTimeInput = null;
        selectedSubjects.Clear();
        selectedFaculty = "Немає";
        subjectSearch = string.Empty;
        filteredSubjects = allSubjects;
        usernameSearch = null;
        foreach (var day in daysOfWeek)
        {
            selectedDays[day] = false;
        }
        StateHasChanged();
        await ApplyFilters();
    }
}
